{"version":3,"file":"patch.js","sourceRoot":"","sources":["../../../../../../../libs/cdk/transformations/src/lib/object/patch.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,sBAAsB,CAAC;AAErD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8CG;AACH,MAAM,UAAU,KAAK,CAAmB,MAAS,EAAE,GAAe;IAChE,MAAM,MAAM,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;IAE7C,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,aAAa,CAAC,GAAG,CAAC,EAAE;QAChD,OAAO,CAAC,IAAI,CAAC,yBAAyB,MAAM,oBAAoB,CAAC,CAAC;QAClE,OAAO,kBAAK,MAAM,CAAO,CAAC;KAC3B;IAED,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,EAAE;QACjD,OAAO,CAAC,IAAI,CACV,yBAAyB,MAAM,gBAAgB,GAAG,mBAAmB,CACtE,CAAC;QACF,OAAO,MAAM,CAAC;KACf;IAED,uCAAY,MAAM,GAAK,MAAM,EAAG;AAClC,CAAC","sourcesContent":["import { isObjectGuard } from '../_internals/guards';\n\n/**\n * @description\n * Merges an object of type T with updates of type Partial<T>.\n * Returns a new object where updates override original values while not mutating the original one.\n\n * @example\n * interface Creature {\n *  id: number,\n *  type: string,\n *  name: string\n * }\n *\n * const cat = {id: 1, type: 'cat'};\n *\n * const catWithname = patch(cat, {name: 'Fluffy'});\n *\n * // catWithname will be:\n * // {id: 1, type: 'cat', name: 'Fluffy'};\n *\n * @example\n * // Usage with RxState\n *\n * export class ProfileComponent {\n *\n *    readonly changeName$ = new Subject<string>();\n *\n *    constructor(private state: RxState<ComponentState>) {\n *      // Reactive implementation\n *      state.connect(\n *        this.changeName$,\n *        (state, name) => {\n *            return patch(state, { name });\n *        }\n *      );\n *    }\n *\n *    // Imperative implementation\n *    changeName(name: string): void {\n *        this.state.set(patch(this.get(), { name }));\n *    }\n * }\n *\n * @returns T\n *\n * @docsPage patch\n * @docsCategory transformation-helpers\n */\nexport function patch<T extends object>(object: T, upd: Partial<T>): T {\n  const update = isObjectGuard(upd) ? upd : {};\n\n  if (!isObjectGuard(object) && isObjectGuard(upd)) {\n    console.warn(`Patch: original value ${object} is not an object.`);\n    return { ...update } as T;\n  }\n\n  if (!isObjectGuard(object) && !isObjectGuard(upd)) {\n    console.warn(\n      `Patch: original value ${object} and updates ${upd} are not objects.`\n    );\n    return object;\n  }\n\n  return { ...object, ...update };\n}\n"]}