{"version":3,"file":"setProp.js","sourceRoot":"","sources":["../../../../../../../libs/cdk/transformations/src/lib/object/setProp.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,aAAa,EAAE,MAAM,sBAAsB,CAAC;AAEzE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAyCG;AACH,MAAM,UAAU,OAAO,CACrB,MAAS,EACT,GAAM,EACN,KAAW;IAEX,MAAM,cAAc,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;IAC7C,MAAM,UAAU,GAAG,OAAO,CAAI,GAAG,CAAC,CAAC;IACnC,MAAM,aAAa,GAAG,cAAc,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAE,EAAQ,CAAC;IAE1D,IAAI,CAAC,cAAc,EAAE;QACnB,OAAO,CAAC,IAAI,CAAC,4BAA4B,MAAM,qBAAqB,CAAC,CAAC;KACvE;IAED,IAAI,CAAC,UAAU,EAAE;QACf,OAAO,CAAC,IAAI,CAAC,0BAA0B,GAAG,eAAe,CAAC,CAAC;KAC5D;IAED,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE;QACrC,OAAO,MAAM,CAAC;KACf;IAED,IAAI,UAAU,EAAE;QACd,uCACK,aAAa,KAChB,CAAC,GAAG,CAAC,EAAE,KAAK,IACZ;KACH;IAED,yBAAY,aAAa,EAAG;AAC9B,CAAC","sourcesContent":["import { isDefined, isKeyOf, isObjectGuard } from '../_internals/guards';\n\n/**\n * @description\n * Accepts an object of type T, key of type K extends keyof T, and value of type T[K].\n * Sets the property and returns a newly updated shallow copy of an object while not mutating the original one.\n *\n * @example\n *\n * const cat = {id: 1, type: 'cat', name: 'Fluffy'};\n *\n * const renamedCat = setProp(cat, 'name', 'Bella');\n *\n * // renamedCat will be:\n * // {id: 1, type: 'cat', name: 'Bella'};\n *\n * @example\n * // Usage with RxState\n *\n * export class ProfileComponent {\n *\n *    readonly changeName$ = new Subject<string>();\n *\n *    constructor(private state: RxState<ComponentState>) {\n *      // Reactive implementation\n *      state.connect(\n *        this.changeName$,\n *        (state, name) => {\n *            return setProp(state, 'name', name);\n *        }\n *      );\n *    }\n *\n *    // Imperative implementation\n *    changeName(name: string): void {\n *        this.state.set(setProp(this.get(), 'name', name));\n *    }\n * }\n *\n * @returns T\n *\n * @docsPage setProp\n * @docsCategory transformation-helpers\n */\nexport function setProp<T extends object, K extends keyof T>(\n  object: T,\n  key: K,\n  value: T[K]\n): T {\n  const objectIsObject = isObjectGuard(object);\n  const keyIsValid = isKeyOf<T>(key);\n  const initialObject = objectIsObject ? object : ({} as T);\n\n  if (!objectIsObject) {\n    console.warn(`SetProp: original value (${object}) is not an object.`);\n  }\n\n  if (!keyIsValid) {\n    console.warn(`SetProp: key argument (${key}) is invalid.`);\n  }\n\n  if (!isDefined(object) && !keyIsValid) {\n    return object;\n  }\n\n  if (keyIsValid) {\n    return {\n      ...initialObject,\n      [key]: value\n    };\n  }\n\n  return { ...initialObject };\n}\n"]}