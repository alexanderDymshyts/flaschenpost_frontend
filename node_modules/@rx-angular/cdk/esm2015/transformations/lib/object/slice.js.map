{"version":3,"file":"slice.js","sourceRoot":"","sources":["../../../../../../../libs/cdk/transformations/src/lib/object/slice.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,aAAa,EAAE,MAAM,sBAAsB,CAAC;AAEzE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAkCG;AACH,MAAM,UAAU,KAAK,CACnB,MAAS,EACT,IAAa;IAEb,MAAM,cAAc,GAAG,SAAS,CAAC,MAAM,CAAC,IAAI,aAAa,CAAC,MAAM,CAAC,CAAC;IAElE,IAAI,CAAC,cAAc,EAAE;QACnB,OAAO,CAAC,IAAI,CAAC,0BAA0B,MAAM,qBAAqB,CAAC,CAAC;QACpE,OAAO,SAAgB,CAAC;KACzB;IAED,MAAM,aAAa,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAChE,CAAC,CAAC,EAAE,EAAE,CAAC,OAAO,CAAI,CAAC,CAAC,IAAI,CAAC,IAAI,MAAM,CACpC,CAAC;IAEF,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE;QACzB,OAAO,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;QAC/C,OAAO,SAAgB,CAAC;KACzB;IAED,OAAO,aAAa,CAAC,MAAM,CACzB,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,iCAAM,GAAG,KAAE,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,IAAG,EACxC,EAAgB,CACjB,CAAC;AACJ,CAAC","sourcesContent":["import { isDefined, isKeyOf, isObjectGuard } from '../_internals/guards';\n\n/**\n * @description\n * Accepts an object of type T and single key or array of keys (K extends keyof T).\n * Constructs new object based on provided keys.\n *\n * @example\n *\n * const cat = {id: 1, type: 'cat', name: 'Fluffy'};\n *\n * const catWithoutType = slice(cat, ['name', 'id']);\n *\n * // catWithoutType will be:\n * // {id: 1, name: 'Fluffy'};\n *\n * @example\n * // Usage with RxState\n *\n * export class AnimalsListComponent {\n *\n *    constructor(private state: RxState<ComponentState>, private api: ApiService) {\n *      state.connect(\n *        'animals'\n *        this.api.getAnimals(),\n *        (state, animals) => {\n *            return animals.map(animal => slice(animal, ['id', 'name']));\n *        }\n *      );\n *    }\n * }\n *\n * @returns T\n *\n * @docsPage slice\n * @docsCategory transformation-helpers\n */\nexport function slice<T extends object, K extends keyof T>(\n  object: T,\n  keys: K | K[]\n): Pick<T, K> {\n  const objectIsObject = isDefined(object) && isObjectGuard(object);\n\n  if (!objectIsObject) {\n    console.warn(`slice: original value (${object}) is not an object.`);\n    return undefined as any;\n  }\n\n  const sanitizedKeys = (Array.isArray(keys) ? keys : [keys]).filter(\n    (k) => isKeyOf<T>(k) && k in object\n  );\n\n  if (!sanitizedKeys.length) {\n    console.warn(`slice: provided keys not found`);\n    return undefined as any;\n  }\n\n  return sanitizedKeys.reduce(\n    (acc, k) => ({ ...acc, [k]: object[k] }),\n    {} as Pick<T, K>\n  );\n}\n"]}