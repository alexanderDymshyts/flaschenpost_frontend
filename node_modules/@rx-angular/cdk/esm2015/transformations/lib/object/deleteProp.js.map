{"version":3,"file":"deleteProp.js","sourceRoot":"","sources":["../../../../../../../libs/cdk/transformations/src/lib/object/deleteProp.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,aAAa,EAAE,MAAM,sBAAsB,CAAC;AAEzE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2CG;AACH,MAAM,UAAU,UAAU,CACxB,MAAS,EACT,GAAM;IAEN,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE;QAChD,OAAO,CAAC,IAAI,CAAC,8BAA8B,MAAM,oBAAoB,CAAC,CAAC;QACvE,OAAO,MAAM,CAAC;KACf;IAED,IAAI,CAAC,OAAO,CAAI,GAAG,CAAC,EAAE;QACpB,OAAO,CAAC,IAAI,CAAC,6DAA6D,CAAC,CAAC;QAC5E,yBAAY,MAAM,EAAG;KACtB;IAED,MAAM,IAAI,qBAAQ,MAAM,CAAE,CAAC;IAC3B,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC;IACjB,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import { isDefined, isKeyOf, isObjectGuard } from '../_internals/guards';\n\n/**\n * @description\n * Accepts an object of type T and key of type K extends keyof T.\n * Removes property from an object and returns a shallow copy of the updated object without specified property.\n * If property not found returns copy of the original object.\n * Not mutating original object.\n *\n * @example\n *\n * const cat = {id: 1, type: 'cat', name: 'Fluffy'};\n *\n * const anonymusCat = deleteProp(cat, 'name');\n *\n * // anonymusCat will be:\n * // {id: 1, type: 'cat'};\n *\n * @example\n * // Usage with RxState\n *\n * export class ProfileComponent {\n *\n *    readonly removeName$ = new Subject();\n *\n *    constructor(private state: RxState<ComponentState>) {\n *      // Reactive implementation\n *      state.connect(\n *        this.removeName$,\n *        (state) => {\n *            return deleteProp(state, 'name');\n *        }\n *      );\n *    }\n *\n *    // Imperative implementation\n *    removeName(): void {\n *        this.state.set(remove(this.get(), 'name'));\n *    }\n * }\n *\n * @returns Omit<T, K>\n *\n * @docsPage deleteProp\n * @docsCategory transformation-helpers\n */\nexport function deleteProp<T extends object, K extends keyof T>(\n  object: T,\n  key: K\n): Omit<T, K> {\n  if (!isDefined(object) || !isObjectGuard(object)) {\n    console.warn(`DeleteProp: original value ${object} is not an object.`);\n    return object;\n  }\n\n  if (!isKeyOf<T>(key)) {\n    console.warn(`DeleteProp: provided key is not a string, number or symbol.`);\n    return { ...object };\n  }\n\n  const copy = { ...object };\n  delete copy[key];\n  return copy;\n}\n"]}