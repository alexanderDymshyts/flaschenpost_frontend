{"version":3,"file":"toDictionary.js","sourceRoot":"","sources":["../../../../../../../libs/cdk/transformations/src/lib/array/toDictionary.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,OAAO,EAA0B,MAAM,sBAAsB,CAAC;AAElF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+CG;AACH,MAAM,UAAU,YAAY,CAC1B,MAAW,EACX,GAGqC;IAErC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE;QACtB,OAAO,MAAM,CAAC;KACf;IAED,MAAM,WAAW,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC;IAEnC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,WAAW,IAAI,CAAC,OAAO,CAAI,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE;QACxE,IAAI,CAAC,WAAW,EAAE;YAChB,OAAO,CAAC,IAAI,CAAC,wCAAwC,CAAC,CAAC;SACxD;QACD,OAAO,EAAE,CAAC;KACX;IAED,MAAM,UAAU,GAAyB,EAAE,CAAC;IAC5C,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;IAC7B,IAAI,CAAC,GAAG,CAAC,CAAC;IAEV,KAAK,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;QACvB,UAAU,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;KAChE;IAED,OAAO,UAAU,CAAC;AACpB,CAAC","sourcesContent":["import { isDefined, isKeyOf, OnlyKeysOfSpecificType } from '../_internals/guards';\n\n/**\n * @description\n * Converts an array of objects to a dictionary {[key: string]: T}.\n * Accepts array T[] and key of type string, number or symbol as inputs.\n *\n *\n * @example\n *\n * const creatures = [{id: 1, type: 'cat'}, {id: 2, type: 'dog'}, {id: 3, type: 'parrot'}];\n *\n * const creaturesDictionary = toDictionary(creatures, 'id');\n *\n * // creaturesDictionary will be:\n * // {\n * //  1: {id: 1, type: 'cat'},\n * //  2: {id: 2, type: 'dog'},\n * //  3: {id: 3, type: 'parrot'}\n * // };\n * @example\n * // Usage with RxState\n *\n * export class ListComponent {\n *\n *    readonly convertToDictionary$ = new Subject();\n *\n *    constructor(private state: RxState<ComponentState>) {\n *      // Reactive implementation\n *      state.connect(\n *        'creaturesDictionary',\n *        this.convertToDictionary$,\n *        ({ creatures }) => {\n *            return toDictionary(creatures, 'id');\n *        }\n *      );\n *    }\n *\n *    // Imperative implementation\n *    convertToDictionary(): void {\n *        this.state.set({ creaturesDictionary: toDictionary(this.state.get().creatures, 'id'});\n *    }\n * }\n *\n * @see {@link OnlyKeysOfSpecificType}\n * @param {OnlyKeysOfSpecificType<T, S>} key\n * @returns { [key: string]: T[] }\n * @docsPage toDictionary\n * @docsCategory transformation-helpers\n */\nexport function toDictionary<T extends object>(\n  source: T[],\n  key:\n    | OnlyKeysOfSpecificType<T, number>\n    | OnlyKeysOfSpecificType<T, string>\n    | OnlyKeysOfSpecificType<T, symbol>\n): { [key: string]: T } {\n  if (!isDefined(source)) {\n    return source;\n  }\n\n  const sourceEmpty = !source.length;\n\n  if (!Array.isArray(source) || sourceEmpty || !isKeyOf<T>(source[0][key])) {\n    if (!sourceEmpty) {\n      console.warn('ToDictionary: unexpected input params.');\n    }\n    return {};\n  }\n\n  const dictionary: { [key: string]: T } = {};\n  const length = source.length;\n  let i = 0;\n\n  for (i; i < length; i++) {\n    dictionary[`${source[i][key]}`] = Object.assign({}, source[i]);\n  }\n\n  return dictionary;\n}\n"]}