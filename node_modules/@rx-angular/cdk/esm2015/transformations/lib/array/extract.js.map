{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../../../../libs/cdk/transformations/src/lib/array/extract.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,MAAM,sBAAsB,CAAC;AAE1D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiCG;AACF,MAAM,UAAU,OAAO,CACtB,KAAU,EACV,IAAa;IAEb,MAAM,YAAY,GAAG,SAAS,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAE9D,IAAI,CAAC,YAAY,EAAE;QACjB,OAAO,CAAC,IAAI,CAAC,4BAA4B,KAAK,oBAAoB,CAAC,CAAC;QACpE,OAAO,SAAgB,CAAC;KACzB;IAED,MAAM,aAAa,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAChE,CAAC,CAAC,EAAE,CAAC,OAAO,CAAI,CAAC,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAC9C,CAAC;IACF,MAAM,MAAM,GAAG,aAAa,CAAC,MAAM,CAAC;IAEpC,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE;QACzB,OAAO,CAAC,IAAI,CAAC,kCAAkC,CAAC,CAAC;QACjD,OAAO,SAAgB,CAAC;KACzB;IAED,OAAO,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;QACtB,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,MAAM,MAAM,GAAG,EAAgB,CAAC;QAEhC,KAAI,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;YACtB,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;SACnD;QAED,OAAO,MAAM,CAAC;IAChB,CAAC,CACA,CAAC;AACJ,CAAC","sourcesContent":["import { isDefined, isKeyOf } from '../_internals/guards';\n\n/**\n * @description\n * Accepts an array of objects of type T and single key or array of keys (K extends keyof T).\n * The `exctract` method is pure and immutable, thus not touching the input values and returning a shallow\n * copy of the extracted source.\n *\n * @example\n *\n * const cats = [{id: 1, type: 'cat', name: 'Fluffy'}, {id: 2, type: 'cat', name: 'Emma'}];\n *\n * const catsWithoutTypes = extract(cats, ['name', 'id']);\n *\n * // catsWithoutTypes will be:\n * // [{id: 1, name: 'Fluffy'}, {id: 2, name: 'Emma'}];\n *\n * @example\n * // Usage with RxState\n *\n * export class AnimalsListComponent {\n *\n *    constructor(private state: RxState<ComponentState>, private api: ApiService) {\n *      state.connect(\n *        'animals'\n *        this.api.getAnimals(),\n *        (state, animals) => extract(animals, ['id', 'name'])\n *      );\n *    }\n * }\n *\n * @returns T\n *\n * @docsPage slice\n * @docsCategory transformation-helpers\n */\n export function extract<T extends object, K extends keyof T>(\n  array: T[],\n  keys: K | K[]\n): Pick<T, K>[] {\n  const arrayIsArray = isDefined(array) && Array.isArray(array);\n\n  if (!arrayIsArray) {\n    console.warn(`extract: original value (${array}) is not an array.`);\n    return undefined as any;\n  }\n\n  const sanitizedKeys = (Array.isArray(keys) ? keys : [keys]).filter(\n    k => isKeyOf<T>(k) && array.some(i => k in i)\n  );\n  const length = sanitizedKeys.length;\n\n  if (!sanitizedKeys.length) {\n    console.warn(`extract: provided keys not found`);\n    return undefined as any;\n  }\n\n  return array.map(item => {\n    let i = 0;\n    const result = {} as Pick<T, K>;\n\n    for(i; i < length; i++) {\n      result[sanitizedKeys[i]] = item[sanitizedKeys[i]];\n    }\n\n    return result;\n  }\n  );\n}\n"]}