{"version":3,"file":"remove.js","sourceRoot":"","sources":["../../../../../../../libs/cdk/transformations/src/lib/array/remove.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,SAAS,EAAE,MAAM,sBAAsB,CAAC;AACjD,OAAO,EAAE,cAAc,EAAE,MAAM,mCAAmC,CAAC;AAEnE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6EG;AACH,MAAM,UAAU,MAAM,CACpB,MAAW,EACX,KAAgC,EAChC,OAA2B;IAE3B,MAAM,YAAY,GAAG,SAAS,CAAC,KAAK,CAAC;QACnC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC;YACpB,CAAC,CAAC,KAAK;YACP,CAAC,CAAC,CAAC,KAAK,CAAC;QACX,CAAC,CAAC,EAAE,CAAC;IACP,MAAM,YAAY,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAE5C,IAAI,YAAY,EAAE;QAChB,OAAO,CAAC,IAAI,CAAC,2BAA2B,MAAM,mBAAmB,CAAC,CAAC;QACnE,OAAO,MAAM,CAAC;KACf;IAED,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,YAAY,EAAE,EAAE;QACpC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CACjC,cAAc,CAAC,IAAS,EAAE,YAAY,EAAE,OAAO,CAAC,CACjD,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { ComparableData } from '../interfaces/comparable-data-type';\nimport { isDefined } from '../_internals/guards';\nimport { valuesComparer } from '../_internals/valuesComparer.util';\n\n/**\n * @description\n * Removes one or multiple items from an array T[].\n * For comparison you can provide a key, an array of keys or a custom comparison function that should return true if items match.\n * If no comparison data is provided, an equality check is used by default.\n * Returns a shallow copy of the updated array T[], and does not mutate the original one.\n *\n * @example\n * // Removing value without comparison data\n *\n * const items = [1,2,3,4,5];\n *\n * const updatedItems = remove(items, [1,2,3]);\n *\n * // updatedItems will be: [4,5];\n *\n * @example\n * // Removing values with comparison function\n *\n * const creatures = [{id: 1, type: 'cat'}, {id: 2, type: 'unicorn'}, {id: 3, type: 'kobold'}];\n *\n * const nonExistingCreatures = [{id: 2, type: 'unicorn'}, {id: 3, type: 'kobold'}];\n *\n * const realCreatures = remove(creatures, nonExistingCreatures, (a, b) => a.id === b.id);\n *\n * // realCreatures will be: [{id: 1, type: 'cat'}];\n *\n * @example\n * // Removing values with key\n *\n * const creatures = [{id: 1, type: 'cat'}, {id: 2, type: 'unicorn'}, {id: 3, type: 'kobold'}];\n *\n * const nonExistingCreatures = [{id: 2, type: 'unicorn'}, {id: 3, type: 'kobold'}];\n *\n * const realCreatures = remove(creatures, nonExistingCreatures, 'id');\n *\n * // realCreatures will be: [{id: 1, type: 'cat'}];\n *\n * @example\n * // Removing values with array of keys\n *\n * const creatures = [{id: 1, type: 'cat'}, {id: 2, type: 'unicorn'}, {id: 3, type: 'kobold'}];\n *\n * const nonExistingCreatures = [{id: 2, type: 'unicorn'}, {id: 3, type: 'kobold'}];\n *\n * const realCreatures = remove(creatures, nonExistingCreatures, ['id', 'type']);\n *\n * // realCreatures will be: [{id: 1, type: 'cat'}];\n *\n * @example\n * // Usage with RxState\n *\n * export class ListComponent {\n *\n *    readonly removeCreature$ = new Subject<Creature>();\n *\n *    constructor(private state: RxState<ComponentState>) {\n *      // Reactive implementation\n *      state.connect(\n *        'creatures',\n *        this.removeCreature$,\n *        ({ creatures }, creatureToRemove) => {\n *            return remove(creatures, creatureToRemove, (a, b) => a.id === b.id);\n *        }\n *      );\n *    }\n *\n *    // Imperative implementation\n *    removeCreature(creatureToRemove: Creature): void {\n *        this.state.set({ creatures: remove(this.state.get().creatures, creatureToRemove, (a, b) => a.id === b.id)});\n *    }\n * }\n *\n * @returns T[]\n *\n * @docsPage remove\n * @docsCategory transformation-helpers\n */\nexport function remove<T>(\n  source: T[],\n  scrap: Partial<T>[] | Partial<T>,\n  compare?: ComparableData<T>\n): T[] {\n  const scrapAsArray = isDefined(scrap)\n    ? Array.isArray(scrap)\n      ? scrap\n      : [scrap]\n    : [];\n  const invalidInput = !Array.isArray(source);\n\n  if (invalidInput) {\n    console.warn(`Remove: original value (${source}) is not an array`);\n    return source;\n  }\n\n  return source.filter((existingItem) => {\n    return !scrapAsArray.some((item) =>\n      valuesComparer(item as T, existingItem, compare)\n    );\n  });\n}\n"]}