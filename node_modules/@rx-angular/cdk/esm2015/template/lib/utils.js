import { onStrategy, } from '@rx-angular/cdk/render-strategies';
import { concat, of } from 'rxjs';
import { ignoreElements, switchMap } from 'rxjs/operators';
/**
 * @internal
 * creates an embeddedViewRef
 *
 * @param viewContainerRef
 * @param templateRef
 * @param context
 * @param index
 * @return EmbeddedViewRef<C>
 */
export function createEmbeddedView(viewContainerRef, templateRef, context, index = 0) {
    const view = viewContainerRef.createEmbeddedView(templateRef, context, index);
    view.detectChanges();
    return view;
}
/**
 * @internal
 *
 * A factory function returning an object to handle `TemplateRef`'s.
 * You can add and get a `TemplateRef`.
 *
 */
export function templateHandling(viewContainerRef) {
    const templateCache = new Map();
    const get = (name) => {
        return templateCache.get(name);
    };
    return {
        add(name, templateRef) {
            assertTemplate(name, templateRef);
            if (!templateCache.has(name)) {
                templateCache.set(name, templateRef);
            }
            else {
                throw new Error('Updating an already existing Template is not supported at the moment.');
            }
        },
        get,
        createEmbeddedView: (name, context) => createEmbeddedView(viewContainerRef, get(name), context),
    };
    //
    function assertTemplate(property, templateRef) {
        const isTemplateRefOrNull = !!(!templateRef || templateRef.createEmbeddedView);
        if (!isTemplateRefOrNull) {
            throw new Error(`${property} must be a TemplateRef, but received something else.`);
        }
        return isTemplateRefOrNull;
    }
}
/**
 * @internal
 *
 * A side effect operator similar to `tap` but with a static internal logic.
 * It calls detect changes on the 'VirtualParent' and the injectingViewCdRef.
 *
 * @param injectingViewCdRef
 * @param strategy
 * @param notifyNeeded
 * @param ngZone
 */
export function notifyAllParentsIfNeeded(injectingViewCdRef, strategy, notifyNeeded, ngZone) {
    return (o$) => o$.pipe(switchMap((v) => {
        const notifyParent = notifyNeeded();
        if (!notifyParent) {
            return of(v);
        }
        return concat(of(v), onStrategy(injectingViewCdRef, strategy, (_v, work, options) => {
            /*console.log(
             'notifyAllParentsIfNeeded injectingView',
             (injectingViewCdRef as any).context
             );*/
            work(injectingViewCdRef, options.scope);
        }, {
            scope: injectingViewCdRef.context || injectingViewCdRef,
            ngZone,
        }).pipe(ignoreElements()));
    }));
}
//# sourceMappingURL=utils.js.map