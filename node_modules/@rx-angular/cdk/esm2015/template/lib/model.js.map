{"version":3,"file":"model.js","sourceRoot":"","sources":["../../../../../../libs/cdk/template/src/lib/model.ts"],"names":[],"mappings":"AAeA,MAAM,CAAN,IAAY,mBAIX;AAJD,WAAY,mBAAmB;IAC7B,yCAAkB,CAAA;IAClB,+CAAwB,CAAA;IACxB,+CAAwB,CAAA;AAC1B,CAAC,EAJW,mBAAmB,KAAnB,mBAAmB,QAI9B","sourcesContent":["import {\n  ChangeDetectorRef,\n  EmbeddedViewRef,\n  ErrorHandler,\n  NgZone,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { RxNotification } from '@rx-angular/cdk/notifications';\nimport { RxStrategies } from '@rx-angular/cdk/render-strategies';\n\nexport type rxBaseTemplateNames = 'errorTpl' | 'completeTpl' | 'suspenseTpl';\n\nexport enum RxBaseTemplateNames {\n  error = 'errorTpl',\n  complete = 'completeTpl',\n  suspense = 'suspenseTpl',\n}\n\nexport const enum RxListTemplateChangeType {\n  insert,\n  remove,\n  move,\n  update,\n  context,\n}\n// [value, index, oldIndex?]\nexport type RxListTemplateChangePayload<T> = [T, number, number?];\nexport type RxListTemplateChange<T = any> = [\n  RxListTemplateChangeType,\n  RxListTemplateChangePayload<T>\n];\nexport type RxListTemplateChanges<T = any> = [\n  RxListTemplateChange<T>[], // changes to apply\n  boolean // notify parent\n];\n\nexport interface RxViewContext<T> {\n  // to enable `let` syntax we have to use $implicit (var; let v = var)\n  $implicit: T;\n  // set context var complete to true (var$; let e = $error)\n  error: boolean | Error;\n  // set context var complete to true (var$; let c = $complete)\n  complete: boolean;\n  // set context var suspense to true (var$; let s = $suspense)\n  suspense: boolean;\n}\n\nexport interface RxRenderAware<T> {\n  nextStrategy: (nextConfig: string | Observable<string>) => void;\n  render: (values$: Observable<RxNotification<T>>) => Observable<void>;\n}\n\nexport interface RxRenderSettings {\n  cdRef: ChangeDetectorRef;\n  parent: boolean;\n  patchZone: NgZone | false;\n  strategies: RxStrategies<string>;\n  defaultStrategyName: string;\n  errorHandler?: ErrorHandler;\n}\n\nexport type CreateEmbeddedView<C> = (\n  viewContainerRef: ViewContainerRef,\n  patchZone: NgZone | false\n) => (\n  templateRef: TemplateRef<C>,\n  context?: C,\n  index?: number\n) => EmbeddedViewRef<C>;\n\nexport type CreateViewContext<T, C, U = unknown> = (\n  value: T,\n  computedContext: U\n) => C;\n\nexport type UpdateViewContext<T, C, U = unknown> = (\n  value: T,\n  view: EmbeddedViewRef<C>,\n  computedContext?: U\n) => void;\n\nexport interface RxTemplateSettings<T, C> {\n  viewContainerRef: ViewContainerRef;\n  customContext?: (value: T) => Partial<C>;\n}\n\nexport interface RxListTemplateSettings<T, C, U = unknown> {\n  viewContainerRef: ViewContainerRef;\n  createViewContext: CreateViewContext<T, C, U>;\n  updateViewContext: UpdateViewContext<T, C, U>;\n  initialTemplateRef?: TemplateRef<C>;\n}\n"]}