{"version":3,"file":"list-view-handler.js","sourceRoot":"","sources":["../../../../../../libs/cdk/template/src/lib/list-view-handler.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  RxListTemplateChange,\n  RxListTemplateChanges,\n  RxListTemplateChangeType,\n  RxListTemplateSettings,\n} from './model';\nimport { EmbeddedViewRef, IterableChanges } from '@angular/core';\nimport { RxListViewContext } from './list-view-context';\nimport { createEmbeddedView } from './utils';\n\n/**\n * @internal\n *\n * Factory that returns a `ListTemplateManager` for the passed params.\n *\n * @param templateSettings\n */\nexport function getTemplateHandler<C extends RxListViewContext<T>, T>(\n  templateSettings: Omit<RxListTemplateSettings<T, C>, 'patchZone'>\n): ListTemplateManager<T> {\n  const {\n    viewContainerRef,\n    initialTemplateRef,\n    createViewContext,\n    updateViewContext,\n  } = templateSettings;\n\n  return {\n    updateUnchangedContext,\n    insertView,\n    moveView,\n    removeView,\n    getListChanges,\n    updateView,\n  };\n\n  // =====\n\n  function updateUnchangedContext(item: T, index: number, count: number) {\n    const view = <EmbeddedViewRef<C>>viewContainerRef.get(index);\n    updateViewContext(item, view, {\n      count,\n      index,\n    });\n    view.detectChanges();\n  }\n\n  function moveView(\n    oldIndex: number,\n    item: T,\n    index: number,\n    count: number\n  ): void {\n    const oldView = viewContainerRef.get(oldIndex);\n    const view = <EmbeddedViewRef<C>>viewContainerRef.move(oldView, index);\n    updateViewContext(item, view, {\n      count,\n      index,\n    });\n    view.detectChanges();\n  }\n\n  function updateView(item: T, index: number, count: number): void {\n    const view = <EmbeddedViewRef<C>>viewContainerRef.get(index);\n    updateViewContext(item, view, {\n      count,\n      index,\n    });\n    view.detectChanges();\n  }\n\n  function removeView(index: number): void {\n    return viewContainerRef.remove(index);\n  }\n\n  function insertView(item: T, index: number, count: number): void {\n    createEmbeddedView(\n      viewContainerRef,\n      initialTemplateRef,\n      createViewContext(item, {\n        count,\n        index,\n      }),\n      index\n    );\n  }\n}\n\n/**\n * @internal\n *\n * An object that holds methods needed to introduce actions to a list e.g. move, remove, insert\n */\nexport interface ListTemplateManager<T> {\n  updateUnchangedContext(item: T, index: number, count: number): void;\n\n  insertView(item: T, index: number, count: number): void;\n\n  moveView(oldIndex: number, item: T, index: number, count: number): void;\n\n  updateView(item: T, index: number, count: number): void;\n\n  removeView(index: number): void;\n\n  getListChanges(\n    changes: IterableChanges<T>,\n    items: T[]\n  ): RxListTemplateChanges;\n}\n\n/**\n * @internal\n *\n * @param changes\n * @param items\n */\nfunction getListChanges<T>(\n  changes: IterableChanges<T>,\n  items: T[]\n): RxListTemplateChanges {\n  const changedIdxs = new Set<T>();\n  const changesArr: RxListTemplateChange[] = [];\n  let notifyParent = false;\n  changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n    const item = record.item;\n    if (record.previousIndex == null) {\n      // insert\n      changesArr.push(\n        getInsertChange(item, currentIndex === null ? undefined : currentIndex)\n      );\n      changedIdxs.add(item);\n      notifyParent = true;\n    } else if (currentIndex == null) {\n      // remove\n      changesArr.push(\n        getRemoveChange(\n          item,\n          adjustedPreviousIndex === null ? undefined : adjustedPreviousIndex\n        )\n      );\n      notifyParent = true;\n    } else if (adjustedPreviousIndex !== null) {\n      // move\n      changesArr.push(getMoveChange(item, currentIndex, adjustedPreviousIndex));\n      changedIdxs.add(item);\n      notifyParent = true;\n    }\n  });\n  changes.forEachIdentityChange((record) => {\n    const item = record.item;\n    if (!changedIdxs.has(item)) {\n      changesArr.push(getUpdateChange(item, record.currentIndex));\n      changedIdxs.add(item);\n    }\n  });\n  items.forEach((item, index) => {\n    if (!changedIdxs.has(item)) {\n      changesArr.push(getUnchangedChange(item, index));\n    }\n  });\n  return [changesArr, notifyParent];\n\n  // ==========\n\n  function getMoveChange(\n    item: T,\n    currentIndex: number,\n    adjustedPreviousIndex: number\n  ): RxListTemplateChange {\n    return [\n      RxListTemplateChangeType.move,\n      [item, currentIndex, adjustedPreviousIndex],\n    ];\n  }\n\n  function getUpdateChange(\n    item: T,\n    currentIndex: number\n  ): RxListTemplateChange {\n    return [RxListTemplateChangeType.update, [item, currentIndex]];\n  }\n\n  function getUnchangedChange(item: T, index: number): RxListTemplateChange {\n    return [RxListTemplateChangeType.context, [item, index]];\n  }\n\n  function getInsertChange(\n    item: T,\n    currentIndex: number\n  ): RxListTemplateChange {\n    return [\n      RxListTemplateChangeType.insert,\n      [item, currentIndex === null ? undefined : currentIndex],\n    ];\n  }\n\n  function getRemoveChange(\n    item: T,\n    adjustedPreviousIndex: number\n  ): RxListTemplateChange {\n    return [\n      RxListTemplateChangeType.remove,\n      [\n        item,\n        adjustedPreviousIndex === null ? undefined : adjustedPreviousIndex,\n      ],\n    ];\n  }\n}\n"]}