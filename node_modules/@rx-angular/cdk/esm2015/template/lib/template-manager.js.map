{"version":3,"file":"template-manager.js","sourceRoot":"","sources":["../../../../../../libs/cdk/template/src/lib/template-manager.ts"],"names":[],"mappings":"AAUA,OAAO,EACL,UAAU,EAEV,gBAAgB,GACjB,MAAM,mCAAmC,CAAC;AAC3C,OAAO,EAAE,KAAK,EAAE,KAAK,EAAc,EAAE,EAAE,MAAM,MAAM,CAAC;AACpD,OAAO,EACL,UAAU,EACV,GAAG,EACH,SAAS,EACT,GAAG,EACH,cAAc,GACf,MAAM,gBAAgB,CAAC;AAQxB,OAAO,EAAE,kBAAkB,EAAE,MAAM,gBAAgB,CAAC;AACpD,OAAO,EAAE,wBAAwB,EAAE,gBAAgB,EAAE,MAAM,SAAS,CAAC;AAUrE;;;;;;GAMG;AACH,MAAM,UAAU,6BAA6B,CAC3C,iBAAuC;IAEvC,0BAA0B;IAC1B,OAAO;QACL,QAAQ,EAAE,CAAC,YAAuC,EAAE,EAAE;YACpD,MAAM,SAAS,GAAyB,YAAY,CAAC,KAAU,CAAC;YAChE,uBACE,SAAS,EACT,QAAQ,EAAE,IAAI,EACd,KAAK,EAAE,KAAK,EACZ,QAAQ,EAAE,KAAK,IACZ,iBAAiB,CAAC,SAAS,CAAC,EAC/B;QACJ,CAAC;QACD,IAAI,EAAE,CAAC,YAAmC,EAAE,EAAE;YAC5C,MAAM,SAAS,GAAyB,YAAY,CAAC,KAAU,CAAC;YAChE,uBACE,SAAS,EACT,QAAQ,EAAE,KAAK,EACf,KAAK,EAAE,KAAK,EACZ,QAAQ,EAAE,KAAK,IACZ,iBAAiB,CAAC,SAAS,CAAC,EAC/B;QACJ,CAAC;QACD,KAAK,EAAE,CAAC,YAAoC,EAAE,EAAE;YAC9C,MAAM,SAAS,GAAyB,YAAY,CAAC,KAAU,CAAC;YAChE,uBACE,SAAS,EACT,QAAQ,EAAE,KAAK,EACf,KAAK,EAAE,YAAY,CAAC,KAAK,IAAI,IAAI,EACjC,QAAQ,EAAE,KAAK,IACZ,iBAAiB,CAAC,SAAS,CAAC,EAC/B;QACJ,CAAC;QACD,QAAQ,EAAE,CAAC,YAAuC,EAAE,EAAE;YACpD,MAAM,SAAS,GAAyB,YAAY,CAAC,KAAU,CAAC;YAChE,uBACE,SAAS,EACT,KAAK,EAAE,KAAK,EACZ,QAAQ,EAAE,IAAI,EACd,QAAQ,EAAE,KAAK,IACZ,iBAAiB,CAAC,SAAS,CAAC,EAC/B;QACJ,CAAC;KACF,CAAC;AACJ,CAAC;AAWD,MAAM,UAAU,qBAAqB,CAInC,MAKD;IACC,MAAM,EAAE,cAAc,EAAE,0BAA0B,EAAE,gBAAgB,EAAE,GACpE,MAAM,CAAC;IACT,MAAM,EACJ,mBAAmB,EACnB,UAAU,EACV,KAAK,EAAE,kBAAkB,EACzB,SAAS,EACT,MAAM,GACP,GAAG,cAAc,CAAC;IAEnB,MAAM,YAAY,GAAG,kBAAkB,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;IACrE,MAAM,MAAM,GAAG,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC;IAEjD,IAAI,cAAiB,CAAC;IAEtB,MAAM,iBAAiB,GAAG,gBAAgB,CAAC,mBAAmB,EAAE,UAAU,CAAC,CAAC;IAC5E,MAAM,SAAS,GAAG,gBAAgB,CAAO,gBAAgB,CAAC,gBAAgB,CAAC,CAAC;IAC5E,MAAM,gBAAgB,GAAG,gBAAgB,CAAC,gBAAgB,CAAC;IAE3D,MAAM,eAAe,GAAG,MAAM,CAAC,gBAAgB,IAAI,KAAK,CAAC;IACzD,MAAM,UAAU,GAAG,6BAA6B,CAC9C,gBAAgB,CAAC,aAAa,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAC/C,CAAC;IAEF,OAAO;QACL,cAAc,EAAE,CAAC,IAAO,EAAE,WAA2B,EAAE,EAAE;YACvD,SAAS,CAAC,GAAG,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;QACnC,CAAC;QACD,YAAY,EAAE,iBAAiB,CAAC,IAAI;QACpC,MAAM,CAAC,OAAsC;YAC3C,IAAI,GAAmC,CAAC;YACxC,IAAI,YAAY,GAAsB;gBACpC,KAAK,EAAE,SAAS;gBAChB,QAAQ,EAAE,KAAK;gBACf,KAAK,EAAE,KAAK;gBACZ,IAAI,2BAA6B;gBACjC,QAAQ,EAAE,KAAK;aAChB,CAAC;YAEF,OAAO,KAAK,CACV,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC,CAAC,EAC5C,eAAe,CAAC,IAAI,CAClB,GAAG,CAAqB,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,CAAC,CACtD,CACF,CAAC,IAAI,CACJ,GAAG,CAAC,GAAG,EAAE;gBACP,MAAM,WAAW,GAAuB,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC;gBACjE,GAAG,GAAG,SAAS,CAAC;gBAChB,MAAM,KAAK,GAAM,YAAY,CAAC,KAAU,CAAC;gBACzC,MAAM,YAAY,GAAG,0BAA0B,CAAC,WAAW,CAAC,CAC1D,KAAK,EACL,SAAS,CACV,CAAC;gBACF,MAAM,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;gBAC7C,OAAO,EAAE,QAAQ,EAAE,YAAY,EAAE,YAAY,EAAE,WAAW,EAAE,CAAC;YAC/D,CAAC,CAAC,EACF,cAAc,CAAC,iBAAiB,CAAC,SAAS,CAAC;YAC3C,qBAAqB;YACrB,SAAS,CACP,CAAC,CACC,EAAE,QAAQ,EAAE,YAAY,EAAE,YAAY,EAAE,WAAW,EAAE,EACrD,QAAQ,EACT,EAAE,EAAE;gBACH,MAAM,aAAa,GAAG,cAAc,KAAK,YAAY,IAAI,CAAC,QAAQ,CAAC;gBACnE,MAAM,YAAY,GAAG,aAAa,IAAI,MAAM,CAAC;gBAC7C,OAAO,UAAU,CACf,YAAY,CAAC,KAAK,EAClB,QAAQ,EACR,CAAC,CAAI,EAAE,IAAkB,EAAE,OAA4B,EAAE,EAAE;oBACzD,MAAM,OAAO,GAAM,UAAU,CAAC,WAAW,CAAC,CAAC,YAAY,CAAC,CAAC;oBACzD,IAAI,aAAa,EAAE;wBACjB,kEAAkE;wBAClE,yBAAyB;wBACzB,sCAAsC;wBACtC,IAAI,gBAAgB,CAAC,MAAM,GAAG,CAAC,EAAE;4BAC/B,0BAA0B;4BAC1B,gBAAgB,CAAC,KAAK,EAAE,CAAC;yBAC1B;wBACD,yBAAyB;wBACzB,IAAI,QAAQ,EAAE;4BACZ,iEAAiE;4BACjE,SAAS,CAAC,kBAAkB,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;yBACrD;qBACF;yBAAM,IAAI,QAAQ,EAAE;wBACnB,oCAAoC;wBACpC,gBAAgB;wBAChB,MAAM,IAAI,GAAuB,gBAAgB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;wBACzD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE;4BACjC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;wBAC/B,CAAC,CAAC,CAAC;wBACH,uCAAuC;wBACvC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;qBACzC;oBACD,cAAc,GAAG,YAAY,CAAC;gBAChC,CAAC,EACD,EAAE,MAAM,EAAE;gBACV,gFAAgF;gBAChF,4EAA4E;gBAC5E,iFAAiF;gBACjF,4FAA4F;gBAC5F,mCAAmC;iBACpC,CAAC,IAAI,CACJ,wBAAwB,CACtB,kBAAkB,EAClB,QAAQ,EACR,GAAG,EAAE,CAAC,YAAY,EAClB,MAAM,CACP,EACD,UAAU,CAAC,CAAC,CAAC,EAAE,EAAE;oBACf,YAAY,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;oBAC5B,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;gBACf,CAAC,CAAC,CACH,CAAC;YACJ,CAAC,CACF,CACF,CAAC;QACJ,CAAC;KACF,CAAC;AACJ,CAAC","sourcesContent":["import { EmbeddedViewRef, TemplateRef } from '@angular/core';\nimport { RxCoalescingOptions } from '@rx-angular/cdk/coalescing';\nimport {\n  RxCompleteNotification,\n  RxErrorNotification,\n  RxNextNotification,\n  RxNotification,\n  RxNotificationKind,\n  RxSuspenseNotification,\n} from '@rx-angular/cdk/notifications';\nimport {\n  onStrategy,\n  RxRenderWork,\n  strategyHandling,\n} from '@rx-angular/cdk/render-strategies';\nimport { EMPTY, merge, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  map,\n  switchMap,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport {\n  rxBaseTemplateNames,\n  RxRenderAware,\n  RxRenderSettings,\n  RxTemplateSettings,\n  RxViewContext,\n} from './model';\nimport { createErrorHandler } from './render-error';\nimport { notifyAllParentsIfNeeded, templateHandling } from './utils';\n\nexport interface RxTemplateManager<\n  T,\n  C extends RxViewContext<T>,\n  N = rxBaseTemplateNames | string\n> extends RxRenderAware<T> {\n  addTemplateRef: (name: N, templateRef: TemplateRef<C>) => void;\n}\n\n/**\n * @internal\n *\n * A factory function that returns a map of projections to turn a notification of a Observable (next, error, complete)\n *\n * @param customNextContext - projection function to provide custom properties as well as override existing\n */\nexport function notificationKindToViewContext<T>(\n  customNextContext: (value: T) => object\n): RxViewContextMap<T> {\n  // @TODO rethink overrides\n  return {\n    suspense: (notification: RxSuspenseNotification<T>) => {\n      const $implicit: T | null | undefined = notification.value as T;\n      return {\n        $implicit,\n        suspense: true,\n        error: false,\n        complete: false,\n        ...customNextContext($implicit),\n      };\n    },\n    next: (notification: RxNextNotification<T>) => {\n      const $implicit: T | null | undefined = notification.value as T;\n      return {\n        $implicit,\n        suspense: false,\n        error: false,\n        complete: false,\n        ...customNextContext($implicit),\n      };\n    },\n    error: (notification: RxErrorNotification<T>) => {\n      const $implicit: T | null | undefined = notification.value as T;\n      return {\n        $implicit,\n        complete: false,\n        error: notification.error || true,\n        suspense: false,\n        ...customNextContext($implicit),\n      };\n    },\n    complete: (notification: RxCompleteNotification<T>) => {\n      const $implicit: T | null | undefined = notification.value as T;\n      return {\n        $implicit,\n        error: false,\n        complete: true,\n        suspense: false,\n        ...customNextContext($implicit),\n      };\n    },\n  };\n}\nexport type RxViewContextMap<T> = Record<\n  RxNotificationKind,\n  (value?: any) => Partial<RxViewContext<T>>\n>;\n\nexport type RxNotificationTemplateNameMap<T, C, N> = Record<\n  RxNotificationKind,\n  (value?: T, templates?: { get: (name: N) => TemplateRef<C> }) => N\n>;\n\nexport function createTemplateManager<\n  T,\n  C extends RxViewContext<T>,\n  N extends string = string\n>(config: {\n  renderSettings: RxRenderSettings;\n  templateSettings: RxTemplateSettings<T, C>;\n  templateTrigger$?: Observable<RxNotificationKind>;\n  notificationToTemplateName: RxNotificationTemplateNameMap<T, C, N>;\n}): RxTemplateManager<T, C, N> {\n  const { renderSettings, notificationToTemplateName, templateSettings } =\n    config;\n  const {\n    defaultStrategyName,\n    strategies,\n    cdRef: injectingViewCdRef,\n    patchZone,\n    parent,\n  } = renderSettings;\n\n  const errorHandler = createErrorHandler(renderSettings.errorHandler);\n  const ngZone = patchZone ? patchZone : undefined;\n\n  let activeTemplate: N;\n\n  const strategyHandling$ = strategyHandling(defaultStrategyName, strategies);\n  const templates = templateHandling<N, C>(templateSettings.viewContainerRef);\n  const viewContainerRef = templateSettings.viewContainerRef;\n\n  const triggerHandling = config.templateTrigger$ || EMPTY;\n  const getContext = notificationKindToViewContext(\n    templateSettings.customContext || (() => ({}))\n  );\n\n  return {\n    addTemplateRef: (name: N, templateRef: TemplateRef<C>) => {\n      templates.add(name, templateRef);\n    },\n    nextStrategy: strategyHandling$.next,\n    render(values$: Observable<RxNotification<T>>): Observable<any> {\n      let trg: RxNotificationKind | undefined;\n      let notification: RxNotification<T> = {\n        value: undefined,\n        complete: false,\n        error: false,\n        kind: RxNotificationKind.Suspense,\n        hasValue: false,\n      };\n\n      return merge(\n        values$.pipe(tap((n) => (notification = n))),\n        triggerHandling.pipe(\n          tap<RxNotificationKind>((trigger) => (trg = trigger))\n        )\n      ).pipe(\n        map(() => {\n          const contextKind: RxNotificationKind = trg || notification.kind;\n          trg = undefined;\n          const value: T = notification.value as T;\n          const templateName = notificationToTemplateName[contextKind](\n            value,\n            templates\n          );\n          const template = templates.get(templateName);\n          return { template, templateName, notification, contextKind };\n        }),\n        withLatestFrom(strategyHandling$.strategy$),\n        // Cancel old renders\n        switchMap(\n          ([\n            { template, templateName, notification, contextKind },\n            strategy,\n          ]) => {\n            const isNewTemplate = activeTemplate !== templateName || !template;\n            const notifyParent = isNewTemplate && parent;\n            return onStrategy(\n              notification.value,\n              strategy,\n              (v: T, work: RxRenderWork, options: RxCoalescingOptions) => {\n                const context = <C>getContext[contextKind](notification);\n                if (isNewTemplate) {\n                  // template has changed (undefined => next; suspense => next; ...)\n                  // handle remove & insert\n                  // remove current view if there is any\n                  if (viewContainerRef.length > 0) {\n                    // patch removal if needed\n                    viewContainerRef.clear();\n                  }\n                  // create new view if any\n                  if (template) {\n                    // createEmbeddedView is already patched, no need for workFactory\n                    templates.createEmbeddedView(templateName, context);\n                  }\n                } else if (template) {\n                  // template didn't change, update it\n                  // handle update\n                  const view = <EmbeddedViewRef<C>>viewContainerRef.get(0);\n                  Object.keys(context).forEach((k) => {\n                    view.context[k] = context[k];\n                  });\n                  // update view context, patch if needed\n                  work(view, options.scope, notification);\n                }\n                activeTemplate = templateName;\n              },\n              { ngZone }\n              // we don't need to specify any scope here. The template manager is the only one\n              // who will call `viewRef#detectChanges` on any of the templates it manages.\n              // whenever a new value comes in, any pre-scheduled work of this taskManager will\n              // be nooped before a new work will be scheduled. This happens because of the implementation\n              // of `StrategyCredential#behavior`\n            ).pipe(\n              notifyAllParentsIfNeeded(\n                injectingViewCdRef,\n                strategy,\n                () => notifyParent,\n                ngZone\n              ),\n              catchError((e) => {\n                errorHandler.handleError(e);\n                return of(e);\n              })\n            );\n          }\n        )\n      );\n    },\n  };\n}\n"]}