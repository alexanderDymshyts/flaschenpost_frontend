{"version":3,"file":"list-template-manager.js","sourceRoot":"","sources":["../../../../../../libs/cdk/template/src/lib/list-template-manager.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  EmbeddedViewRef,\n  IterableChanges,\n  IterableDiffer,\n  IterableDiffers,\n  NgIterable,\n  TemplateRef,\n  TrackByFunction,\n} from '@angular/core';\nimport { combineLatest, MonoTypeOperatorFunction, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  distinctUntilChanged,\n  map,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\nimport {\n  RxStrategyCredentials,\n  onStrategy,\n  strategyHandling,\n} from '@rx-angular/cdk/render-strategies';\nimport {\n  RxListViewComputedContext,\n  RxListViewContext,\n} from './list-view-context';\nimport { getTemplateHandler } from './list-view-handler';\nimport {\n  RxListTemplateChange,\n  RxListTemplateChangeType,\n  RxListTemplateSettings,\n  RxRenderSettings,\n} from './model';\nimport { createErrorHandler } from './render-error';\nimport { notifyAllParentsIfNeeded } from './utils';\n\nexport interface RxListManager<T> {\n  nextStrategy: (config: string | Observable<string>) => void;\n\n  render(changes$: Observable<NgIterable<T>>): Observable<NgIterable<T> | null>;\n}\n\nexport function createListTemplateManager<\n  T,\n  C extends RxListViewContext<T>\n>(config: {\n  renderSettings: RxRenderSettings;\n  templateSettings: RxListTemplateSettings<T, C, RxListViewComputedContext> & {\n    templateRef: TemplateRef<C>;\n  };\n  trackBy: TrackByFunction<T>;\n  iterableDiffers: IterableDiffers;\n}): RxListManager<T> {\n  const { templateSettings, renderSettings, trackBy, iterableDiffers } = config;\n  const {\n    defaultStrategyName,\n    strategies,\n    cdRef: injectingViewCdRef,\n    patchZone,\n    parent,\n  } = renderSettings;\n  const errorHandler = createErrorHandler(renderSettings.errorHandler);\n  const ngZone = patchZone ? patchZone : undefined;\n  const strategyHandling$ = strategyHandling(defaultStrategyName, strategies);\n\n  let _differ: IterableDiffer<T> | undefined;\n  function getDiffer(values: NgIterable<T>): IterableDiffer<T> | null {\n    if (_differ) {\n      return _differ;\n    }\n    return values\n      ? (_differ = iterableDiffers.find(values).create(trackBy))\n      : null;\n  }\n  //               type,  context\n  /* TODO (regarding createView): this is currently not in use. for the list-manager this would mean to provide\n   functions for not only create. developers than should have to provide create, move, remove,... the whole thing.\n   i don't know if this is the right decision for a first RC */\n  const listViewHandler = getTemplateHandler({\n    ...templateSettings,\n    initialTemplateRef: templateSettings.templateRef,\n  });\n  const viewContainerRef = templateSettings.viewContainerRef;\n\n  let notifyParent = false;\n  let changesArr: RxListTemplateChange[];\n  let partiallyFinished = false;\n\n  return {\n    nextStrategy(nextConfig: Observable<string>): void {\n      strategyHandling$.next(nextConfig);\n    },\n    render(\n      values$: Observable<NgIterable<T>>\n    ): Observable<NgIterable<T> | null> {\n      return values$.pipe(render());\n    },\n  };\n\n  function handleError() {\n    return (o$) =>\n      o$.pipe(\n        catchError((err: Error) => {\n          partiallyFinished = false;\n          errorHandler.handleError(err);\n          return of(null);\n        })\n      );\n  }\n\n  function render(): MonoTypeOperatorFunction<NgIterable<T> | null> {\n    return (o$: Observable<NgIterable<T>>): Observable<NgIterable<T> | null> =>\n      combineLatest([\n        o$,\n        strategyHandling$.strategy$.pipe(distinctUntilChanged()),\n      ]).pipe(\n        map(([iterable, strategy]) => {\n          const differ = getDiffer(iterable);\n          let changes: IterableChanges<T>;\n          if (differ) {\n            if (partiallyFinished) {\n              const currentIterable = [];\n              for (let i = 0, ilen = viewContainerRef.length; i < ilen; i++) {\n                const viewRef = <EmbeddedViewRef<C>>viewContainerRef.get(i);\n                currentIterable[i] = viewRef.context.$implicit;\n              }\n              differ.diff(currentIterable);\n            }\n            changes = differ.diff(iterable);\n          }\n          return {\n            changes,\n            iterable,\n            strategy,\n          };\n        }),\n        // Cancel old renders\n        switchMap(({ changes, iterable, strategy }) => {\n          if (!changes) {\n            return of([]);\n          }\n          const values = iterable || [];\n          // TODO: we might want to treat other iterables in a more performant way than Array.from()\n          const items = Array.isArray(values) ? values : Array.from(iterable);\n          const listChanges = listViewHandler.getListChanges(changes, items);\n          changesArr = listChanges[0];\n          const insertedOrRemoved = listChanges[1];\n          const applyChanges$ = getObservablesFromChangesArray(\n            changesArr,\n            strategy,\n            items.length\n          );\n          partiallyFinished = true;\n          notifyParent = insertedOrRemoved && parent;\n          return combineLatest(\n            applyChanges$.length > 0 ? applyChanges$ : [of(null)]\n          ).pipe(\n            tap(() => (partiallyFinished = false)),\n            notifyAllParentsIfNeeded(\n              injectingViewCdRef,\n              strategy,\n              () => notifyParent,\n              ngZone\n            ),\n            handleError(),\n            map(() => iterable)\n          );\n        }),\n        handleError()\n      );\n  }\n\n  /**\n   * @internal\n   *\n   * returns an array of streams which process all of the view updates needed to reflect the latest diff to the\n   * viewContainer.\n   * I\n   *\n   * @param changes\n   * @param strategy\n   * @param count\n   */\n  function getObservablesFromChangesArray(\n    changes: RxListTemplateChange<T>[],\n    strategy: RxStrategyCredentials,\n    count: number\n  ): Observable<RxListTemplateChangeType>[] {\n    return changes.length > 0\n      ? changes.map((change) => {\n          const payload = change[1];\n          return onStrategy(\n            change[0],\n            strategy,\n            (type) => {\n              switch (type) {\n                case RxListTemplateChangeType.insert:\n                  listViewHandler.insertView(payload[0], payload[1], count);\n                  break;\n                case RxListTemplateChangeType.move:\n                  listViewHandler.moveView(\n                    payload[2],\n                    payload[0],\n                    payload[1],\n                    count\n                  );\n                  break;\n                case RxListTemplateChangeType.remove:\n                  listViewHandler.removeView(payload[1]);\n                  break;\n                case RxListTemplateChangeType.update:\n                  listViewHandler.updateView(payload[0], payload[1], count);\n                  break;\n                case RxListTemplateChangeType.context:\n                  listViewHandler.updateUnchangedContext(\n                    payload[0],\n                    payload[1],\n                    count\n                  );\n                  break;\n              }\n            },\n            { ngZone }\n          );\n        })\n      : [of(null)];\n  }\n}\n"]}