{"version":3,"file":"coalesceWith.js","sourceRoot":"","sources":["../../../../../../libs/cdk/coalescing/src/lib/coalesceWith.ts"],"names":[],"mappings":"AAAA,OAAO,EAEL,UAAU,EAGV,YAAY,GAEb,MAAM,MAAM,CAAC;AACd,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AAExD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8BG;AACH,MAAM,UAAU,YAAY,CAC1B,gBAAqC,EACrC,KAA+B;IAE/B,MAAM,MAAM,GAAG,KAAK,IAAI,EAAE,CAAC;IAE3B,OAAO,CAAC,MAAM,EAAE,EAAE;QAChB,OAAO,IAAI,UAAU,CAAI,CAAC,QAAQ,EAAE,EAAE;YACpC,MAAM,gBAAgB,GAAG,IAAI,YAAY,EAAE,CAAC;YAC5C,gBAAgB,CAAC,GAAG,CAClB,MAAM,CAAC,SAAS,CAAC,mBAAmB,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC,CAClE,CAAC;YACF,OAAO,gBAAgB,CAAC;QAC1B,CAAC,CAAC,CAAC;QAEH,SAAS,mBAAmB,CAC1B,aAA4B,EAC5B,gBAA8B;YAE9B,IAAI,kBAAkC,CAAC;YACvC,IAAI,WAA0B,CAAC;YAE/B,MAAM,kBAAkB,GAAG,GAAG,EAAE;gBAC9B,IAAI,kBAAkB,EAAE;oBACtB,sEAAsE;oBACtE,iBAAiB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;oBACjC,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE;wBAC3C,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;qBACjC;iBACF;YACH,CAAC,CAAC;YACF,OAAO;gBACL,QAAQ,EAAE,GAAG,EAAE;oBACb,kBAAkB,EAAE,CAAC;oBACrB,aAAa,CAAC,QAAQ,EAAE,CAAC;gBAC3B,CAAC;gBACD,KAAK,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,aAAa,CAAC,KAAK,CAAC,KAAK,CAAC;gBAC5C,IAAI,EAAE,CAAC,KAAK,EAAE,EAAE;oBACd,WAAW,GAAG,KAAK,CAAC;oBACpB,IAAI,CAAC,kBAAkB,EAAE;wBACvB,iBAAiB,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;wBAC9B,kBAAkB,GAAG,gBAAgB,CAAC,SAAS,CAAC;4BAC9C,KAAK,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,aAAa,CAAC,KAAK,CAAC,KAAK,CAAC;4BAC5C,IAAI,EAAE,GAAG,EAAE;gCACT,kBAAkB,EAAE,CAAC;gCACrB,kBAAkB,aAAlB,kBAAkB,uBAAlB,kBAAkB,CAAE,WAAW,EAAE,CAAC;gCAClC,kBAAkB,GAAG,SAAS,CAAC;4BACjC,CAAC;4BACD,QAAQ,EAAE,GAAG,EAAE;gCACb,kBAAkB,EAAE,CAAC;gCACrB,kBAAkB,GAAG,SAAS,CAAC;4BACjC,CAAC;yBACF,CAAC,CAAC;wBACH,gBAAgB,CAAC,GAAG,CAClB,IAAI,YAAY,CAAC,GAAG,EAAE;4BACpB,kBAAkB,EAAE,CAAC;4BACrB,kBAAkB,aAAlB,kBAAkB,uBAAlB,kBAAkB,CAAE,WAAW,EAAE,CAAC;4BAClC,kBAAkB,GAAG,SAAS,CAAC;wBACjC,CAAC,CAAC,CACH,CAAC;qBACH;gBACH,CAAC;aACF,CAAC;QACJ,CAAC;IACH,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import {\n  MonoTypeOperatorFunction,\n  Observable,\n  Observer,\n  Subscriber,\n  Subscription,\n  Unsubscribable,\n} from 'rxjs';\nimport { coalescingManager } from './coalescingManager';\n\n/**\n * @description\n * Limits the number of synchronous emitted a value from the source Observable to\n * one emitted value per\n *   durationSelector e.g. [`AnimationFrame`](https://developer.mozilla.org/en-US/docs/Web/API/Window/requestAnimationFrame), then repeats\n * this process for every tick of the browsers event loop.\n *\n * The coalesce operator is based on the [throttle](https://rxjs-dev.firebaseapp.com/api/operators/throttle) operator.\n * In addition to that is provides emitted values for the trailing end only, as well as maintaining a context to scope\n *   coalescing.\n *\n * @param {function(value: T): Observable} durationSelector - A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * It defaults to `requestAnimationFrame` as durationSelector.\n * @param scope\n * Defaults to `{ leading: false, trailing: true }`. The default scoping is per subscriber.\n * @return {Observable<T>} An Observable that performs the coalesce operation to\n * limit the rate of emissions from the source.\n *\n * @usageNotes\n * Emit clicks at a rate of at most one click per second\n * ```typescript\n * import { fromEvent, animationFrames } from 'rxjs';\n * import { coalesce } from 'ngRx/component';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(coalesce(ev => animationFrames));\n * result.subscribe(x => console.log(x));\n * ```\n */\nexport function coalesceWith<T>(\n  durationSelector: Observable<unknown>,\n  scope?: Record<string, unknown>\n): MonoTypeOperatorFunction<T> {\n  const _scope = scope || {};\n\n  return (source) => {\n    return new Observable<T>((observer) => {\n      const rootSubscription = new Subscription();\n      rootSubscription.add(\n        source.subscribe(createInnerObserver(observer, rootSubscription))\n      );\n      return rootSubscription;\n    });\n\n    function createInnerObserver(\n      outerObserver: Subscriber<T>,\n      rootSubscription: Subscription\n    ): Observer<T> {\n      let actionSubscription: Unsubscribable;\n      let latestValue: T | undefined;\n\n      const tryEmitLatestValue = () => {\n        if (actionSubscription) {\n          // We only decrement the number if it is greater than 0 (isCoalescing)\n          coalescingManager.remove(_scope);\n          if (!coalescingManager.isCoalescing(_scope)) {\n            outerObserver.next(latestValue);\n          }\n        }\n      };\n      return {\n        complete: () => {\n          tryEmitLatestValue();\n          outerObserver.complete();\n        },\n        error: (error) => outerObserver.error(error),\n        next: (value) => {\n          latestValue = value;\n          if (!actionSubscription) {\n            coalescingManager.add(_scope);\n            actionSubscription = durationSelector.subscribe({\n              error: (error) => outerObserver.error(error),\n              next: () => {\n                tryEmitLatestValue();\n                actionSubscription?.unsubscribe();\n                actionSubscription = undefined;\n              },\n              complete: () => {\n                tryEmitLatestValue();\n                actionSubscription = undefined;\n              },\n            });\n            rootSubscription.add(\n              new Subscription(() => {\n                tryEmitLatestValue();\n                actionSubscription?.unsubscribe();\n                actionSubscription = undefined;\n              })\n            );\n          }\n        },\n      };\n    }\n  };\n}\n"]}