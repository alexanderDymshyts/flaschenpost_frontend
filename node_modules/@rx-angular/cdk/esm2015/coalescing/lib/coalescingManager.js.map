{"version":3,"file":"coalescingManager.js","sourceRoot":"","sources":["../../../../../../libs/cdk/coalescing/src/lib/coalescingManager.ts"],"names":[],"mappings":"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","sourcesContent":["interface CoalescingContextProps extends Record<string, unknown> {\n  numCoalescingSubscribers: number;\n}\n\nexport interface CoalescingManager {\n  remove: (scope: Record<string, unknown>) => void;\n  add: (scope: Record<string, unknown>) => void;\n  isCoalescing: (scope: Record<string, unknown>) => boolean;\n}\n\nexport const coalescingManager: CoalescingManager = createCoalesceManager();\ntype KeyOf<O> = keyof O;\ntype ValueOf<O> = O[keyof O];\nfunction hasKey<O>(ctx: O, property: KeyOf<O>): ctx is O {\n  return ctx[property] != null;\n}\n/*\n * createPropertiesWeakMap\n *\n * @param getDefaults: (o: O) => P\n * Example:\n *\n * export interface Properties {\n *   isCoalescing: boolean;\n * }\n *\n * const obj: object = {\n *   foo: 'bar',\n *   isCoalescing: 'weakMap version'\n * };\n *\n * const getDefaults = (ctx: object): Properties => ({isCoalescing: false});\n * const propsMap = createPropertiesWeakMap<object, Properties>(getDefaults);\n *\n * console.log('obj before:', obj);\n * // {foo: \"bar\", isCoalescing: \"weakMap version\"}\n * console.log('props before:', propsMap.getProps(obj));\n * // {isCoalescing: \"weakMap version\"}\n *\n * propsMap.setProps(obj, {isCoalescing: true});\n * console.log('obj after:', obj);\n * // {foo: \"bar\", isCoalescing: \"weakMap version\"}\n * console.log('props after:', propsMap.getProps(obj));\n * // {isCoalescing: \"true\"}\n * */\nfunction createPropertiesWeakMap<\n  O extends Record<string, unknown>,\n  P extends O\n>(getDefaults: (o: O) => P) {\n  type K = KeyOf<P>;\n  const propertyMap = new WeakMap<O, P>();\n\n  return {\n    getProps: getProperties,\n    setProps: setProperties,\n  };\n\n  function getProperties(ctx: O): P {\n    const defaults = getDefaults(ctx);\n    const propertiesPresent: P | undefined = propertyMap.get(ctx);\n    let properties: P;\n\n    if (propertiesPresent !== undefined) {\n      properties = propertiesPresent as P;\n    } else {\n      properties = {} as P;\n\n      (Object.entries(defaults) as unknown[]).forEach(\n        ([prop, value]: [KeyOf<P>, ValueOf<P>]): void => {\n          if (hasKey(ctx as P, prop)) {\n            properties[prop] = (ctx as P)[prop];\n          } else {\n            properties[prop] = value;\n          }\n        }\n      );\n\n      propertyMap.set(ctx, properties);\n    }\n    return properties;\n  }\n\n  function setProperties(ctx: O, props: Partial<P>): P {\n    const properties: P = getProperties(ctx);\n    (Object.entries(props) as [K, P[K]][]).forEach(([prop, value]) => {\n      properties[prop] = value;\n    });\n    propertyMap.set(ctx, properties);\n    return properties;\n  }\n}\n\nconst coalescingContextPropertiesMap = createPropertiesWeakMap<\n  Record<string, unknown>,\n  CoalescingContextProps\n>((ctx) => ({\n  numCoalescingSubscribers: 0,\n}));\n/**\n * @describe createCoalesceManager\n *\n * returns a\n * Maintains a weak map of component references ans flags\n * them if the coalescing process is already started for them.\n *\n * Used in render aware internally.\n */\nfunction createCoalesceManager(): CoalescingManager {\n  return {\n    remove: removeWork,\n    add: addWork,\n    isCoalescing,\n  };\n\n  // Increments the number of subscriptions in a scope e.g. a class instance\n  function removeWork(scope: Record<string, unknown>): void {\n    const numCoalescingSubscribers =\n      coalescingContextPropertiesMap.getProps(scope).numCoalescingSubscribers -\n      1;\n    coalescingContextPropertiesMap.setProps(scope, {\n      numCoalescingSubscribers:\n        numCoalescingSubscribers >= 0 ? numCoalescingSubscribers : 0,\n    });\n  }\n\n  // Decrements the number of subscriptions in a scope e.g. a class instance\n  function addWork(scope: Record<string, unknown>): void {\n    const numCoalescingSubscribers =\n      coalescingContextPropertiesMap.getProps(scope).numCoalescingSubscribers +\n      1;\n    coalescingContextPropertiesMap.setProps(scope, {\n      numCoalescingSubscribers,\n    });\n  }\n\n  // Checks if anybody else is already coalescing atm\n  function isCoalescing(scope: Record<string, unknown>): boolean {\n    return (\n      coalescingContextPropertiesMap.getProps(scope).numCoalescingSubscribers >\n      0\n    );\n  }\n}\n"]}