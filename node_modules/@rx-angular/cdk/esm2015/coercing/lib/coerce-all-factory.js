import { Subject } from 'rxjs';
import { switchAll } from 'rxjs/operators';
import { coerceDistinctWith } from './coerceDistinctObservableWith';
/**
 * @internal
 *
 * A factory function returning an object to handle the process of merging Observable next notifications into one
 *   Observable. This API takes away the clumsy handling of static values and Observable, reduces the number of
 *   emissions by:
 * - only merging distinct Observables
 * - only emit distingt values of the merged result
 *
 * You can next a Observable of `U` multiple times and merge them into the Observable exposed under one optimized
 *   `values$`
 *
 */
export function coerceAllFactory(subjectFactory, flattenOperator) {
    const observablesSubject = subjectFactory ? subjectFactory() : new Subject();
    flattenOperator = flattenOperator || switchAll();
    const values$ = observablesSubject.pipe(coerceDistinctWith(flattenOperator));
    return {
        next(observable) {
            observablesSubject.next(observable);
        },
        values$,
    };
}
//# sourceMappingURL=coerce-all-factory.js.map