{"version":3,"file":"fromEvent.js","sourceRoot":"","sources":["../../../../../../../libs/cdk/zone-less/rxjs/src/observable/fromEvent.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable, Subscriber } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { getZoneUnPatchedApi } from '@rx-angular/cdk/internals/core';\n\n// @ts-ignore\nconst isFunction = (fn) => typeof fn === 'function';\nconst isArray = Array.isArray;\nconst toString: Function = (() => Object.prototype.toString)();\n\nexport interface NodeStyleEventEmitter {\n  addListener: (eventName: string | symbol, handler: NodeEventHandler) => this;\n  removeListener: (\n    eventName: string | symbol,\n    handler: NodeEventHandler\n  ) => this;\n}\n\nexport type NodeEventHandler = (...args: any[]) => void;\n\n// For APIs that implement `addListener` and `removeListener` methods that may\n// not use the same arguments or return EventEmitter values\n// such as React Native\nexport interface NodeCompatibleEventEmitter {\n  addListener: (eventName: string, handler: NodeEventHandler) => void | {};\n  removeListener: (eventName: string, handler: NodeEventHandler) => void | {};\n}\n\nexport interface JQueryStyleEventEmitter {\n  on: (eventName: string, handler: Function) => void;\n  off: (eventName: string, handler: Function) => void;\n}\n\nexport interface HasEventTargetAddRemove<E> {\n  addEventListener(\n    type: string,\n    listener: ((evt: E) => void) | null,\n    options?: boolean | AddEventListenerOptions\n  ): void;\n  removeEventListener(\n    type: string,\n    listener?: ((evt: E) => void) | null,\n    options?: EventListenerOptions | boolean\n  ): void;\n}\n\nexport type EventTargetLike<T> =\n  | HasEventTargetAddRemove<T>\n  | NodeStyleEventEmitter\n  | NodeCompatibleEventEmitter\n  | JQueryStyleEventEmitter;\n\nexport type FromEventTarget<T> =\n  | EventTargetLike<T>\n  | ArrayLike<EventTargetLike<T>>;\n\nexport interface EventListenerOptions {\n  capture?: boolean;\n  passive?: boolean;\n  once?: boolean;\n}\n\nexport interface AddEventListenerOptions extends EventListenerOptions {\n  once?: boolean;\n  passive?: boolean;\n}\n\n/** @deprecated will be removed with 1.0.0 */\nexport function fromEvent<T>(\n  target: FromEventTarget<T>,\n  eventName: string\n): Observable<T>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function fromEvent<T>(\n  target: FromEventTarget<T>,\n  eventName: string,\n  resultSelector: (...args: any[]) => T\n): Observable<T>;\n/** @deprecated will be removed with 1.0.0 */\nexport function fromEvent<T>(\n  target: FromEventTarget<T>,\n  eventName: string,\n  options: EventListenerOptions\n): Observable<T>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function fromEvent<T>(\n  target: FromEventTarget<T>,\n  eventName: string,\n  options: EventListenerOptions,\n  resultSelector: (...args: any[]) => T\n): Observable<T>;\n/** @deprecated will be removed with 1.0.0 */\nexport function fromEvent<T>(\n  target: FromEventTarget<T>,\n  eventName: string,\n  options?: EventListenerOptions | ((...args: any[]) => T),\n  resultSelector?: (...args: any[]) => T\n): Observable<T> {\n  if (isFunction(options)) {\n    // DEPRECATED PATH\n    // @ts-ignore\n    resultSelector = options;\n    options = undefined;\n  }\n  if (resultSelector) {\n    // DEPRECATED PATH\n    return fromEvent<T>(\n      target,\n      eventName,\n      <EventListenerOptions | undefined>options\n    ).pipe(\n      map((args) =>\n        isArray(args) ? resultSelector(...args) : resultSelector(args)\n      )\n    );\n  }\n\n  return new Observable<T>((subscriber) => {\n    function handler(e: T) {\n      if (arguments.length > 1) {\n        subscriber.next(Array.prototype.slice.call(arguments));\n      } else {\n        subscriber.next(e);\n      }\n    }\n    setupSubscription(\n      target,\n      eventName,\n      handler,\n      subscriber,\n      options as EventListenerOptions\n    );\n  });\n}\n\nfunction setupSubscription<T>(\n  sourceObj: FromEventTarget<T>,\n  eventName: string,\n  handler: (...args: any[]) => void,\n  subscriber: Subscriber<T>,\n  options?: EventListenerOptions\n) {\n  let unsubscribe: () => void;\n  if (isEventTarget(sourceObj)) {\n    const source = sourceObj;\n    getZoneUnPatchedApi(sourceObj, 'addEventListener').call(\n      sourceObj,\n      eventName,\n      handler,\n      options\n    );\n    unsubscribe = () =>\n      getZoneUnPatchedApi(source, 'removeEventListener').call(\n        source,\n        eventName,\n        handler,\n        options\n      );\n  } else if (isJQueryStyleEventEmitter(sourceObj)) {\n    const source = sourceObj;\n    sourceObj.on(eventName, handler);\n    unsubscribe = () => source.off(eventName, handler);\n  } else if (isNodeStyleEventEmitter(sourceObj)) {\n    const source = sourceObj;\n    sourceObj.addListener(eventName, handler as NodeEventHandler);\n    unsubscribe = () =>\n      source.removeListener(eventName, handler as NodeEventHandler);\n  } else if (sourceObj && (sourceObj as any).length) {\n    for (let i = 0, len = (sourceObj as any).length; i < len; i++) {\n      setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n    }\n  } else {\n    throw new TypeError('Invalid event target');\n  }\n\n  subscriber.add(unsubscribe);\n}\n\nfunction isNodeStyleEventEmitter(\n  sourceObj: any\n): sourceObj is NodeStyleEventEmitter {\n  return (\n    sourceObj &&\n    typeof sourceObj.addListener === 'function' &&\n    typeof sourceObj.removeListener === 'function'\n  );\n}\n\nfunction isJQueryStyleEventEmitter(\n  sourceObj: any\n): sourceObj is JQueryStyleEventEmitter {\n  return (\n    sourceObj &&\n    typeof sourceObj.on === 'function' &&\n    typeof sourceObj.off === 'function'\n  );\n}\n\nfunction isEventTarget(\n  sourceObj: any\n): sourceObj is HasEventTargetAddRemove<any> {\n  return (\n    sourceObj &&\n    typeof sourceObj.addEventListener === 'function' &&\n    typeof sourceObj.removeEventListener === 'function'\n  );\n}\n"]}