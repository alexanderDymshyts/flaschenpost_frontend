{"version":3,"file":"AsapAction.js","sourceRoot":"","sources":["../../../../../../../../libs/cdk/zone-less/rxjs/src/scheduler/asap/AsapAction.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,mCAAmC,CAAC;AACtE,OAAO,EAAE,WAAW,EAAE,MAAM,sBAAsB,CAAC;AAInD;;;;GAIG;AACH,MAAM,OAAO,UAAc,SAAQ,WAAc;IAC/C,YACY,SAAwB,EACxB,IAAmD;QAE7D,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QAHb,cAAS,GAAT,SAAS,CAAe;QACxB,SAAI,GAAJ,IAAI,CAA+C;IAG/D,CAAC;IAES,cAAc,CACtB,SAAwB,EACxB,EAAQ,EACR,QAAgB,CAAC;QAEjB,0DAA0D;QAC1D,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,GAAG,CAAC,EAAE;YAC/B,OAAO,KAAK,CAAC,cAAc,CAAC,SAAS,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;SACnD;QACD,qDAAqD;QACrD,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC7B,oEAAoE;QACpE,0EAA0E;QAC1E,sCAAsC;QACtC,OAAO,CACL,SAAS,CAAC,UAAU;YACpB,CAAC,SAAS,CAAC,UAAU,GAAG,iBAAiB,CAAC,YAAY,CACpD,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,EAAE,SAAS,CAAC,CAC3C,CAAC,CACH,CAAC;IACJ,CAAC;IACS,cAAc,CACtB,SAAwB,EACxB,EAAQ,EACR,QAAgB,CAAC;QAEjB,sEAAsE;QACtE,sEAAsE;QACtE,2CAA2C;QAC3C,IAAI,CAAC,KAAK,KAAK,IAAI,IAAI,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,KAAK,IAAI,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,EAAE;YACvE,OAAO,KAAK,CAAC,cAAc,CAAC,SAAS,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;SACnD;QACD,sEAAsE;QACtE,2EAA2E;QAC3E,WAAW;QACX,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE;YACzD,iBAAiB,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;YACrC,SAAS,CAAC,UAAU,GAAG,SAAS,CAAC;SAClC;QACD,sFAAsF;QACtF,OAAO,SAAS,CAAC;IACnB,CAAC;CACF","sourcesContent":["import { immediateProvider } from '../../internals/immediateProvider';\nimport { AsyncAction } from '../async/AsyncAction';\nimport { AsapScheduler } from './AsapScheduler';\nimport { SchedulerAction } from '../types';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsapAction<T> extends AsyncAction<T> {\n  constructor(\n    protected scheduler: AsapScheduler,\n    protected work: (this: SchedulerAction<T>, state?: T) => void\n  ) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(\n    scheduler: AsapScheduler,\n    id?: any,\n    delay: number = 0\n  ): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If a microtask has already been scheduled, don't schedule another\n    // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n    // the current scheduled microtask id.\n    return (\n      scheduler._scheduled ||\n      (scheduler._scheduled = immediateProvider.setImmediate(\n        scheduler.flush.bind(scheduler, undefined)\n      ))\n    );\n  }\n  protected recycleAsyncId(\n    scheduler: AsapScheduler,\n    id?: any,\n    delay: number = 0\n  ): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested microtask and\n    // set the scheduled flag to undefined so the next AsapAction will schedule\n    // its own.\n    if (!scheduler.actions.some((action) => action.id === id)) {\n      immediateProvider.clearImmediate(id);\n      scheduler._scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n"]}