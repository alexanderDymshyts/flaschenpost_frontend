{"version":3,"file":"AnimationFrameAction.js","sourceRoot":"","sources":["../../../../../../../../libs/cdk/zone-less/rxjs/src/scheduler/animation-frame/AnimationFrameAction.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,sBAAsB,EAAE,MAAM,wCAAwC,CAAC;AAChF,OAAO,EAAE,WAAW,EAAE,MAAM,sBAAsB,CAAC;AAInD,MAAM,OAAO,oBAAwB,SAAQ,WAAc;IACzD,YACY,SAAkC,EAClC,IAAmD;QAE7D,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QAHb,cAAS,GAAT,SAAS,CAAyB;QAClC,SAAI,GAAJ,IAAI,CAA+C;IAG/D,CAAC;IAES,cAAc,CACtB,SAAkC,EAClC,EAAQ,EACR,QAAgB,CAAC;QAEjB,0DAA0D;QAC1D,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,GAAG,CAAC,EAAE;YAC/B,OAAO,KAAK,CAAC,cAAc,CAAC,SAAS,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;SACnD;QACD,qDAAqD;QACrD,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC7B,0EAA0E;QAC1E,4EAA4E;QAC5E,0CAA0C;QAC1C,OAAO,CACL,SAAS,CAAC,UAAU;YACpB,CAAC,SAAS,CAAC,UAAU,GAAG,sBAAsB,CAAC,qBAAqB,CAAC,GAAG,EAAE,CACxE,SAAS,CAAC,KAAK,CAAC,SAAS,CAAC,CAC3B,CAAC,CACH,CAAC;IACJ,CAAC;IACS,cAAc,CACtB,SAAkC,EAClC,EAAQ,EACR,QAAgB,CAAC;QAEjB,sEAAsE;QACtE,sEAAsE;QACtE,2CAA2C;QAC3C,IAAI,CAAC,KAAK,IAAI,IAAI,IAAI,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,EAAE;YACrE,OAAO,KAAK,CAAC,cAAc,CAAC,SAAS,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;SACnD;QACD,4EAA4E;QAC5E,4EAA4E;QAC5E,mBAAmB;QACnB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE;YACzD,sBAAsB,CAAC,oBAAoB,CAAC,EAAE,CAAC,CAAC;YAChD,SAAS,CAAC,UAAU,GAAG,SAAS,CAAC;SAClC;QACD,sFAAsF;QACtF,OAAO,SAAS,CAAC;IACnB,CAAC;CACF","sourcesContent":["import { animationFrameProvider } from '../../internals/animationFrameProvider';\nimport { AsyncAction } from '../async/AsyncAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\nimport { SchedulerAction } from '../types';\n\nexport class AnimationFrameAction<T> extends AsyncAction<T> {\n  constructor(\n    protected scheduler: AnimationFrameScheduler,\n    protected work: (this: SchedulerAction<T>, state?: T) => void\n  ) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(\n    scheduler: AnimationFrameScheduler,\n    id?: any,\n    delay: number = 0\n  ): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If an animation frame has already been requested, don't request another\n    // one. If an animation frame hasn't been requested yet, request one. Return\n    // the current animation frame request id.\n    return (\n      scheduler._scheduled ||\n      (scheduler._scheduled = animationFrameProvider.requestAnimationFrame(() =>\n        scheduler.flush(undefined)\n      ))\n    );\n  }\n  protected recycleAsyncId(\n    scheduler: AnimationFrameScheduler,\n    id?: any,\n    delay: number = 0\n  ): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay != null && delay > 0) || (delay == null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested animation frame and\n    // set the scheduled flag to undefined so the next AnimationFrameAction will\n    // request its own.\n    if (!scheduler.actions.some((action) => action.id === id)) {\n      animationFrameProvider.cancelAnimationFrame(id);\n      scheduler._scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n"]}