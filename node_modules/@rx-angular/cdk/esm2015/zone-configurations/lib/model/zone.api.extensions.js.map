{"version":3,"file":"zone.api.extensions.js","sourceRoot":"","sources":["../../../../../../../libs/cdk/zone-configurations/src/lib/model/zone.api.extensions.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Additional `EventTarget` methods added by `Zone.js`.\n *\n * 1. removeAllListeners, remove all event listeners of the given event name.\n * 2. eventListeners, get all event listeners of the given event name.\n */\nexport interface EventTarget {\n  /**\n   *\n   * Remove all event listeners by name for this event target.\n   *\n   * This method is optional because it may not be available if you use `noop zone` when\n   * bootstrapping Angular application or disable the `EventTarget` monkey patch by `zone.js`.\n   *\n   * If the `eventName` is provided, will remove event listeners of that name.\n   * If the `eventName` is not provided, will remove all event listeners associated with\n   * `EventTarget`.\n   *\n   * @param eventName the name of the event, such as `click`. This parameter is optional.\n   */\n  removeAllListeners?(eventName?: string): void;\n  /**\n   *\n   * Retrieve all event listeners by name.\n   *\n   * This method is optional because it may not be available if you use `noop zone` when\n   * bootstrapping Angular application or disable the `EventTarget` monkey patch by `zone.js`.\n   *\n   * If the `eventName` is provided, will return an array of event handlers or event listener\n   * objects of the given event.\n   * If the `eventName` is not provided, will return all listeners.\n   *\n   * @param eventName the name of the event, such as click. This parameter is optional.\n   */\n  eventListeners?(eventName?: string): EventListenerOrEventListenerObject[];\n}\n"]}