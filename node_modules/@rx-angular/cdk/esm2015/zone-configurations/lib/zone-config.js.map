{"version":3,"file":"zone-config.js","sourceRoot":"","sources":["../../../../../../libs/cdk/zone-configurations/src/lib/zone-config.ts"],"names":[],"mappings":"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","sourcesContent":["import { ɵglobal } from '@angular/core';\nimport {\n  RxZoneFlagsHelperFunctions,\n  zoneGlobalDisableConfigurationsKeys,\n  zoneGlobalEventsConfigurationsKeys,\n  zoneGlobalSettingsConfigurationsKeys,\n  zoneRuntimeConfigurationsKeys,\n  zoneTestDisableConfigurationsKeys,\n  zoneTestSettingsConfigurationsKeys,\n} from './model/configurations.types';\nimport { RxZoneGlobalConfigurations } from './model/zone.configurations.api';\nimport {\n  RxZoneConfigConfiguration,\n  RxZoneConfig,\n  RxGlobalDisableConfigurationMethods,\n  RxTestDisableConfigurationMethods,\n  RxZoneGlobalEventsConfigurationsMethods,\n  RxRuntimeConfigurationMethods,\n} from './model/zone-config.types';\nimport { convenienceMethods } from './convenience-methods';\n\nconst zoneDisable = '__Zone_disable_';\nconst zoneSymbol = '__zone_symbol__';\n\n/**\n * https://angular.io/guide/zone#setting-up-zonejs\n **/\nfunction assertZoneConfig() {\n  if ((window as any).Zone !== undefined) {\n    // @TODO link to docs\n    console.error('zone-flags file needs to get imported before zone.js');\n  }\n}\n\nconst addDisableFlag = (prop: string) => ({\n  [prop]: () => {\n    assertZoneConfig();\n    return ((window as any)[zoneDisable + prop] = true);\n  },\n});\n\nconst addSymbolFlag = (prop: string) => ({\n  [prop]: () => {\n    assertZoneConfig();\n    return ((window as any)[zoneSymbol + prop] = true);\n  },\n});\n\nconst addArraySymbolFlag = (prop: string) => ({\n  [prop]: (eventNames: string[]) => {\n    assertZoneConfig();\n    const w: any = window as any;\n    return (w[zoneSymbol + prop] = [\n      ...(Array.isArray(w[zoneSymbol + prop]) ? w[zoneSymbol + prop] : []),\n      ...eventNames,\n    ]);\n  },\n});\n\nconst reduceToObject = <T>(methodsArray: any[]): T => {\n  return methodsArray.reduce((map, item) => ({ ...map, ...item }), {} as T);\n};\n\n/**\n * factory function to create a `RxZoneConfig` object.\n *\n * @Example\n * import { globalEvents,xhrEvent, zoneConfig} from '@rx-angular/cdk/zone-flags';\n *\n * const zoneConfig = createZoneFlagsConfigurator();\n *\n * zoneConfig.global.disable.requestAnimationFrame();\n * zoneConfig.global.disable.timers();\n * zoneConfig.events.disable.UNPATCHED_EVENTS([...globalEvents, ...xhrEvent]);\n *\n */\nfunction createZoneFlagsConfigurator(): RxZoneConfig {\n  const cfg = ɵglobal as unknown as RxZoneGlobalConfigurations;\n  const configProps = [\n    ...[\n      ...zoneGlobalDisableConfigurationsKeys,\n      ...zoneTestDisableConfigurationsKeys,\n    ].map((prop) => zoneDisable + prop),\n    ...[\n      ...zoneGlobalSettingsConfigurationsKeys,\n      ...zoneTestSettingsConfigurationsKeys,\n      ...zoneGlobalEventsConfigurationsKeys,\n      ...zoneRuntimeConfigurationsKeys,\n    ].map((prop) => zoneSymbol + prop),\n  ];\n\n  // append as global method for easy debugging\n  (cfg as RxZoneFlagsHelperFunctions).__rxa_zone_config__log = (): void => {\n    configProps.forEach((flag) => {\n      cfg[flag] && console.log(flag, cfg[flag]);\n    });\n  };\n\n  const zoneConfigObj: RxZoneConfigConfiguration = {\n    global: {\n      disable: reduceToObject<RxGlobalDisableConfigurationMethods>([\n        ...zoneGlobalDisableConfigurationsKeys.map(addDisableFlag),\n        ...zoneGlobalSettingsConfigurationsKeys.map(addSymbolFlag),\n      ]),\n    },\n    test: {\n      disable: reduceToObject<RxTestDisableConfigurationMethods>([\n        ...zoneTestDisableConfigurationsKeys.map(addDisableFlag),\n        ...zoneTestSettingsConfigurationsKeys.map(addSymbolFlag),\n      ]),\n    },\n    events: {\n      disable: reduceToObject<RxZoneGlobalEventsConfigurationsMethods>(\n        zoneGlobalEventsConfigurationsKeys.map(addArraySymbolFlag)\n      ),\n    },\n    runtime: {\n      disable: reduceToObject<RxRuntimeConfigurationMethods>(\n        zoneRuntimeConfigurationsKeys.map(addSymbolFlag)\n      ),\n    },\n  };\n\n  return {\n    ...zoneConfigObj,\n    ...convenienceMethods(zoneConfigObj),\n  };\n}\n\n/**\n * An object for typed zone-flags configuration.\n *\n * @Example\n *\n * create file `zone-flags.ts` parallel to your `polyfills.ts` and insert following content:\n * ```typescript\n * import { globalEvents, xhrEvent, zoneConfig} from '@rx-angular/cdk/zone-flags';\n *\n * zoneConfig.global.disable.requestAnimationFrame();\n * zoneConfig.global.disable.timers();\n * zoneConfig.events.disable.UNPATCHED_EVENTS([...globalEvents, ...xhrEvent]);\n * ```\n * In `polyfills.ts` above the zone import, import `zone-flags.ts`\n *\n * ```typescript\n * import './zone-flags';\n * // Zone JS is required by default for Angular itself.\n * import 'zone.js';\n * ```\n *\n */\nexport const zoneConfig = createZoneFlagsConfigurator();\n"]}