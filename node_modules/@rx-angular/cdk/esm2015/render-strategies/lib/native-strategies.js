import { NgZone } from '@angular/core';
import { Observable } from 'rxjs';
import { tap } from 'rxjs/operators';
import { coalesceWith } from '@rx-angular/cdk/coalescing';
import { getZoneUnPatchedApi } from '@rx-angular/cdk/internals/core';
const animationFrameTick = () => new Observable((subscriber) => {
    // use the unpatched API no avoid zone interference
    const id = getZoneUnPatchedApi('requestAnimationFrame')(() => {
        subscriber.next(0);
        subscriber.complete();
    });
    return () => {
        // use the unpatched API no avoid zone interference
        getZoneUnPatchedApi('cancelAnimationFrame')(id);
    };
});
const localCredentials = {
    name: 'local',
    work: (cdRef, _, notification) => {
        cdRef.detectChanges();
    },
    behavior: ({ work, scope, ngZone }) => (o$) => o$.pipe(coalesceWith(animationFrameTick(), scope), tap(() => (ngZone ? ngZone.run(() => work()) : work()))),
};
const noopCredentials = {
    name: 'noop',
    work: () => void 0,
    behavior: () => (o$) => o$,
};
const nativeCredentials = {
    name: 'native',
    work: (cdRef) => cdRef.markForCheck(),
    behavior: ({ work, ngZone }) => (o$) => o$.pipe(tap(() => ngZone && !NgZone.isInAngularZone()
        ? ngZone.run(() => work())
        : work())),
};
/**
 * @deprecated
 * angular drops the internal markDirty API, will fall back to native if used
 */
const globalCredentials = Object.assign(Object.assign({}, nativeCredentials), { name: 'global' });
export const RX_NATIVE_STRATEGIES = {
    global: globalCredentials,
    native: nativeCredentials,
    noop: noopCredentials,
    local: localCredentials,
};
//# sourceMappingURL=native-strategies.js.map