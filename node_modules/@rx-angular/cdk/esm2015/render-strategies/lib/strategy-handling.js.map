{"version":3,"file":"strategy-handling.js","sourceRoot":"","sources":["../../../../../../libs/cdk/render-strategies/src/lib/strategy-handling.ts"],"names":[],"mappings":"AAAA,OAAO,EAAc,aAAa,EAAE,MAAM,MAAM,CAAC;AACjD,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAElE,OAAO,EAAE,gBAAgB,EAAE,MAAM,0BAA0B,CAAC;AAQ5D;;;;;;;;GAQG;AACH,MAAM,UAAU,gBAAgB,CAC9B,mBAA2B,EAC3B,UAA+C;IAE/C,MAAM,YAAY,GAAG,gBAAgB,CACnC,GAAG,EAAE,CAAC,IAAI,aAAa,CAA8B,CAAC,CAAC,EACvD,SAAS,EAAE,CACZ,CAAC;IACF,OAAO;QACL,SAAS,EAAE,YAAY,CAAC,OAAO,CAAC,IAAI,CAClC,SAAS,CAAC,mBAAmB,CAAC,EAC9B,yBAAyB,CAAC,UAAU,EAAE,mBAAmB,CAAC,EAC1D,KAAK,EAAE,CAC6B;QACtC,IAAI,CAAC,IAAiC;YACpC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC1B,CAAC;KACF,CAAC;AACJ,CAAC;AAED;;GAEG;AACH,SAAS,yBAAyB,CAChC,UAA+C,EAC/C,mBAA2B;IAE3B,OAAO,CACL,EAAyC,EACN,EAAE,CACrC,EAAE,CAAC,IAAI,CACL,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CACX,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC;QAC5C,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC;QAClB,CAAC,CAAC,UAAU,CAAC,mBAAmB,CAAC,CACpC,CACF,CAAC;AACN,CAAC","sourcesContent":["import { Observable, ReplaySubject } from 'rxjs';\nimport { map, share, startWith, switchAll } from 'rxjs/operators';\n\nimport { coerceAllFactory } from '@rx-angular/cdk/coercing';\nimport { RxCustomStrategyCredentials, RxStrategyCredentials } from './model';\n\nexport interface RxStrategyHandler {\n  strategy$: Observable<RxStrategyCredentials>;\n  next(name: string | Observable<string>): void;\n}\n\n/**\n * @internal\n *\n * A factory function returning an object to handle the process of turning strategy names into `RxStrategyCredentials`\n * You can next a strategy name as Observable or string and get an Observable of `RxStrategyCredentials`\n *\n * @param defaultStrategyName\n * @param strategies\n */\nexport function strategyHandling(\n  defaultStrategyName: string,\n  strategies: RxCustomStrategyCredentials<string>\n): RxStrategyHandler {\n  const hotFlattened = coerceAllFactory<string>(\n    () => new ReplaySubject<string | Observable<string>>(1),\n    switchAll()\n  );\n  return {\n    strategy$: hotFlattened.values$.pipe(\n      startWith(defaultStrategyName),\n      nameToStrategyCredentials(strategies, defaultStrategyName),\n      share()\n    ) as Observable<RxStrategyCredentials>,\n    next(name: string | Observable<string>) {\n      hotFlattened.next(name);\n    },\n  };\n}\n\n/**\n * @internal\n */\nfunction nameToStrategyCredentials(\n  strategies: RxCustomStrategyCredentials<string>,\n  defaultStrategyName: string\n) {\n  return (\n    o$: Observable<string | null | undefined>\n  ): Observable<RxStrategyCredentials> =>\n    o$.pipe(\n      map((name) =>\n        name && Object.keys(strategies).includes(name)\n          ? strategies[name]\n          : strategies[defaultStrategyName]\n      )\n    );\n}\n"]}