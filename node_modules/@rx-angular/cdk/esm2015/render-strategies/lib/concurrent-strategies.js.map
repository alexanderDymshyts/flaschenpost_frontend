{"version":3,"file":"concurrent-strategies.js","sourceRoot":"","sources":["../../../../../../libs/cdk/render-strategies/src/lib/concurrent-strategies.ts"],"names":[],"mappings":"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","sourcesContent":["import { NgZone } from '@angular/core';\nimport { MonoTypeOperatorFunction, Observable } from 'rxjs';\nimport { filter, mapTo, switchMap } from 'rxjs/operators';\nimport {\n  cancelCallback,\n  scheduleCallback,\n  forceFrameRate,\n  PriorityLevel,\n} from '@rx-angular/cdk/internals/scheduler';\n\nimport {\n  RxCustomStrategyCredentials,\n  RxConcurrentStrategyNames,\n  RxStrategyCredentials,\n} from './model';\nimport { coalescingManager, coalescingObj } from '@rx-angular/cdk/coalescing';\n\n// set default to 60fps\nforceFrameRate(60);\n\nconst immediateStrategy: RxStrategyCredentials = {\n  name: 'immediate',\n  work: (cdRef) => cdRef.detectChanges(),\n  behavior: ({ work, scope, ngZone }) => {\n    return (o$) =>\n      o$.pipe(\n        scheduleOnQueue(work, {\n          ngZone,\n          priority: PriorityLevel.ImmediatePriority,\n          scope,\n        })\n      );\n  },\n};\n\nconst userBlockingStrategy: RxStrategyCredentials = {\n  name: 'userBlocking',\n  work: (cdRef) => cdRef.detectChanges(),\n  behavior: ({ work, scope, ngZone }) => {\n    return (o$) =>\n      o$.pipe(\n        scheduleOnQueue(work, {\n          ngZone,\n          priority: PriorityLevel.UserBlockingPriority,\n          scope,\n        })\n      );\n  },\n};\n\nconst normalStrategy: RxStrategyCredentials = {\n  name: 'normal',\n  work: (cdRef) => cdRef.detectChanges(),\n  behavior: ({ work, scope, ngZone }) => {\n    return (o$) =>\n      o$.pipe(\n        scheduleOnQueue(work, {\n          ngZone,\n          priority: PriorityLevel.NormalPriority,\n          scope,\n        })\n      );\n  },\n};\n\nconst lowStrategy: RxStrategyCredentials = {\n  name: 'low',\n  work: (cdRef) => cdRef.detectChanges(),\n  behavior: ({ work, scope, ngZone }) => {\n    return (o$) =>\n      o$.pipe(\n        scheduleOnQueue(work, {\n          ngZone,\n          priority: PriorityLevel.LowPriority,\n          scope,\n        })\n      );\n  },\n};\n\nconst idleStrategy: RxStrategyCredentials = {\n  name: 'idle',\n  work: (cdRef) => cdRef.detectChanges(),\n  behavior: ({ work, scope, ngZone }) => {\n    return (o$) =>\n      o$.pipe(\n        scheduleOnQueue(work, {\n          ngZone,\n          priority: PriorityLevel.IdlePriority,\n          scope,\n        })\n      );\n  },\n};\n\nfunction scheduleOnQueue<T>(\n  work: (...args: any[]) => void,\n  options: {\n    priority: PriorityLevel;\n    scope: coalescingObj;\n    delay?: number;\n    ngZone: NgZone;\n  }\n): MonoTypeOperatorFunction<T> {\n  const scope = (options.scope as Record<string, unknown>) || {};\n  return (o$: Observable<T>): Observable<T> =>\n    o$.pipe(\n      filter(() => !coalescingManager.isCoalescing(scope)),\n      switchMap((v) =>\n        new Observable<T>((subscriber) => {\n          coalescingManager.add(scope);\n          const task = scheduleCallback(\n            options.priority,\n            () => {\n              work();\n              coalescingManager.remove(scope);\n              subscriber.next(v);\n            },\n            { delay: options.delay, ngZone: options.ngZone }\n          );\n          return () => {\n            coalescingManager.remove(scope);\n            cancelCallback(task);\n          };\n        }).pipe(mapTo(v))\n      )\n    );\n}\n\nexport type RxConcurrentStrategies =\n  RxCustomStrategyCredentials<RxConcurrentStrategyNames>;\nexport const RX_CONCURRENT_STRATEGIES: RxConcurrentStrategies = {\n  immediate: immediateStrategy,\n  userBlocking: userBlockingStrategy,\n  normal: normalStrategy,\n  low: lowStrategy,\n  idle: idleStrategy,\n};\n"]}