{"version":3,"file":"scheduler.js","sourceRoot":"","sources":["../../../../../../../libs/cdk/internals/scheduler/src/lib/scheduler.ts"],"names":[],"mappings":"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","sourcesContent":["// see https://github.com/facebook/react/blob/main/packages/scheduler/src/forks/Scheduler.js\n\nimport { ɵglobal } from '@angular/core';\nimport { enableIsInputPending } from './schedulerFeatureFlags';\nimport { peek, pop, push, ReactSchedulerTask, SchedulerTaskZone } from './schedulerMinHeap';\n\nimport { PriorityLevel } from './schedulerPriorities';\n\n/**\n * @description Will be provided through Terser global definitions by Angular CLI\n * during the production build.\n */\ndeclare const ngDevMode: boolean;\n\nlet getCurrentTime: () => number;\nconst hasPerformanceNow =\n  typeof ɵglobal.performance === 'object' && typeof ɵglobal.performance.now === 'function';\n\nif (hasPerformanceNow) {\n  const localPerformance = ɵglobal.performance;\n  getCurrentTime = () => localPerformance.now();\n} else {\n  const localDate = Date;\n  const initialTime = localDate.now();\n  getCurrentTime = () => localDate.now() - initialTime;\n}\n\n// Max 31 bit integer. The max integer size in V8 for 32-bit systems.\n// Math.pow(2, 30) - 1\n// 0b111111111111111111111111111111\nconst maxSigned31BitInt = 1073741823;\n\n// Times out immediately\nconst IMMEDIATE_PRIORITY_TIMEOUT = -1;\n// Eventually times out\nconst USER_BLOCKING_PRIORITY_TIMEOUT = 250;\nconst NORMAL_PRIORITY_TIMEOUT = 5000;\nconst LOW_PRIORITY_TIMEOUT = 10000;\n// Never times out\nconst IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;\n\n// Tasks are stored on a min heap\nconst taskQueue = [];\nconst timerQueue = [];\n\n// Incrementing id counter. Used to maintain insertion order.\nlet taskIdCounter = 1;\n\n// Pausing the scheduler is useful for debugging.\nlet isSchedulerPaused = false;\n\nlet currentTask: ReactSchedulerTask = null;\nlet currentPriorityLevel = PriorityLevel.NormalPriority;\n\n// This is set while performing work, to prevent re-entrancy.\nlet isPerformingWork = false;\n\nlet isHostCallbackScheduled = false;\nlet isHostTimeoutScheduled = false;\n\n// Capture local references to native APIs, in case a polyfill overrides them.\nconst setTimeout = ɵglobal.setTimeout;\nconst clearTimeout = ɵglobal.clearTimeout;\nconst setImmediate = ɵglobal.setImmediate; // IE and Node.js + jsdom\nconst messageChannel = ɵglobal.MessageChannel;\n\nconst isInputPending =\n  typeof ɵglobal.navigator !== 'undefined' &&\n  ɵglobal.navigator.scheduling !== undefined &&\n  ɵglobal.navigator.scheduling.isInputPending !== undefined\n  ? ɵglobal.navigator.scheduling.isInputPending.bind(ɵglobal.navigator.scheduling)\n  : null;\n\nconst defaultZone = {\n  run: fn => fn()\n};\nfunction advanceTimers(currentTime) {\n  // Check for tasks that are no longer delayed and add them to the queue.\n  let timer = peek(timerQueue);\n  while (timer !== null) {\n    if (timer.callback === null) {\n      // Timer was cancelled.\n      pop(timerQueue);\n    } else if (timer.startTime <= currentTime) {\n      // Timer fired. Transfer to the task queue.\n      pop(timerQueue);\n      timer.sortIndex = timer.expirationTime;\n      push(taskQueue, timer);\n    } else {\n      // Remaining timers are pending.\n      return;\n    }\n    timer = peek(timerQueue);\n  }\n}\n\nfunction handleTimeout(currentTime) {\n  isHostTimeoutScheduled = false;\n  advanceTimers(currentTime);\n\n  if (!isHostCallbackScheduled) {\n    if (peek(taskQueue) !== null) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    } else {\n      const firstTimer = peek(timerQueue);\n      if (firstTimer !== null) {\n        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n      }\n    }\n  }\n}\n\nfunction flushWork(hasTimeRemaining, initialTime) {\n  // We'll need a host callback the next time work is scheduled.\n  isHostCallbackScheduled = false;\n  if (isHostTimeoutScheduled) {\n    // We scheduled a timeout but it's no longer needed. Cancel it.\n    isHostTimeoutScheduled = false;\n    cancelHostTimeout();\n  }\n\n  isPerformingWork = true;\n  const previousPriorityLevel = currentPriorityLevel;\n  try {\n    return workLoop(hasTimeRemaining, initialTime);\n  } finally {\n    currentTask = null;\n    currentPriorityLevel = previousPriorityLevel;\n    isPerformingWork = false;\n  }\n}\n\nfunction workLoop(hasTimeRemaining: boolean, initialTime: number, _currentTask?: ReactSchedulerTask) {\n  let currentTime = initialTime;\n  if (_currentTask) {\n    currentTask = _currentTask;\n  } else {\n    advanceTimers(currentTime);\n    currentTask = peek(taskQueue);\n  }\n  let zoneChanged = false;\n  const hitDeadline = () =>\n    currentTask && currentTask.expirationTime > currentTime &&\n    (!hasTimeRemaining || shouldYieldToHost());\n\n  if (!hitDeadline()) {\n    const ngZone = currentTask.ngZone || defaultZone;\n    ngZone.run(() => {\n      while (currentTask !== null && !zoneChanged) {\n        if (hitDeadline()) {\n          break;\n        }\n        const callback = currentTask.callback;\n        if (typeof callback === 'function') {\n          currentTask.callback = null;\n          currentPriorityLevel = currentTask.priorityLevel;\n          const didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n          const continuationCallback = callback(didUserCallbackTimeout);\n          currentTime = getCurrentTime();\n          if (typeof continuationCallback === 'function') {\n            currentTask.callback = continuationCallback;\n          } else {\n            if (currentTask === peek(taskQueue)) {\n              pop(taskQueue);\n            }\n          }\n          advanceTimers(currentTime);\n        } else {\n          pop(taskQueue);\n        }\n        currentTask = peek(taskQueue);\n        zoneChanged = currentTask?.ngZone != null && currentTask.ngZone !== ngZone;\n      }\n    });\n  }\n  if (zoneChanged) {\n    return workLoop(hasTimeRemaining, currentTime, currentTask);\n  }\n  // Return whether there's additional work\n  if (currentTask !== null) {\n    return true;\n  } else {\n    const firstTimer = peek(timerQueue);\n    if (firstTimer !== null) {\n      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n    }\n    return false;\n  }\n}\n\nfunction runWithPriority(priorityLevel, eventHandler) {\n  switch (priorityLevel) {\n    case PriorityLevel.ImmediatePriority:\n    case PriorityLevel.UserBlockingPriority:\n    case PriorityLevel.NormalPriority:\n    case PriorityLevel.LowPriority:\n    case PriorityLevel.IdlePriority:\n      break;\n    default:\n      priorityLevel = PriorityLevel.NormalPriority;\n  }\n\n  const previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction next(eventHandler) {\n  let priorityLevel;\n  switch (currentPriorityLevel) {\n    case PriorityLevel.ImmediatePriority:\n    case PriorityLevel.UserBlockingPriority:\n    case PriorityLevel.NormalPriority:\n      // Shift down to normal priority\n      priorityLevel = PriorityLevel.NormalPriority;\n      break;\n    default:\n      // Anything lower than normal priority should remain at the current level.\n      priorityLevel = currentPriorityLevel;\n      break;\n  }\n\n  const previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction wrapCallback(callback: VoidFunction) {\n  const parentPriorityLevel = currentPriorityLevel;\n  return () => {\n    // This is a fork of runWithPriority, inlined for performance.\n    const previousPriorityLevel = currentPriorityLevel;\n    currentPriorityLevel = parentPriorityLevel;\n\n    try {\n      // eslint-disable-next-line prefer-rest-params\n      return callback.apply(this, arguments);\n    } finally {\n      currentPriorityLevel = previousPriorityLevel;\n    }\n  };\n}\n\ninterface ScheduleCallbackOptions {\n  delay?: number;\n  ngZone?: SchedulerTaskZone;\n}\n\nfunction scheduleCallback(\n  priorityLevel: PriorityLevel,\n  callback: VoidFunction,\n  options?: ScheduleCallbackOptions\n): ReactSchedulerTask {\n  const currentTime = getCurrentTime();\n\n  let startTime: number;\n  if (typeof options === 'object' && options !== null) {\n    const delay = options.delay;\n    if (typeof delay === 'number' && delay > 0) {\n      startTime = currentTime + delay;\n    } else {\n      startTime = currentTime;\n    }\n  } else {\n    startTime = currentTime;\n  }\n\n  let timeout: number;\n  switch (priorityLevel) {\n    case PriorityLevel.ImmediatePriority:\n      timeout = IMMEDIATE_PRIORITY_TIMEOUT;\n      break;\n    case PriorityLevel.UserBlockingPriority:\n      timeout = USER_BLOCKING_PRIORITY_TIMEOUT;\n      break;\n    case PriorityLevel.IdlePriority:\n      timeout = IDLE_PRIORITY_TIMEOUT;\n      break;\n    case PriorityLevel.LowPriority:\n      timeout = LOW_PRIORITY_TIMEOUT;\n      break;\n    case PriorityLevel.NormalPriority:\n    default:\n      timeout = NORMAL_PRIORITY_TIMEOUT;\n      break;\n  }\n\n  const expirationTime = startTime + timeout;\n\n  const newTask: ReactSchedulerTask = {\n    id: taskIdCounter++,\n    callback,\n    priorityLevel,\n    startTime,\n    expirationTime,\n    sortIndex: -1,\n    ngZone: options?.ngZone || null\n  };\n\n  if (startTime > currentTime) {\n    // This is a delayed task.\n    newTask.sortIndex = startTime;\n    push(timerQueue, newTask);\n    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\n      // All tasks are delayed, and this is the task with the earliest delay.\n      if (isHostTimeoutScheduled) {\n        // Cancel an existing timeout.\n        cancelHostTimeout();\n      } else {\n        isHostTimeoutScheduled = true;\n      }\n      // Schedule a timeout.\n      requestHostTimeout(handleTimeout, startTime - currentTime);\n    }\n  } else {\n    newTask.sortIndex = expirationTime;\n    push(taskQueue, newTask);\n    // Schedule a host callback, if needed. If we're already performing work,\n    // wait until the next time we yield.\n    if (!isHostCallbackScheduled && !isPerformingWork) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    }\n  }\n\n  return newTask;\n}\n\nfunction pauseExecution() {\n  isSchedulerPaused = true;\n}\n\nfunction continueExecution() {\n  isSchedulerPaused = false;\n  if (!isHostCallbackScheduled && !isPerformingWork) {\n    isHostCallbackScheduled = true;\n    requestHostCallback(flushWork);\n  }\n}\n\nfunction getFirstCallbackNode() {\n  return peek(taskQueue);\n}\n\nfunction cancelCallback(task) {\n  // Null out the callback to indicate the task has been canceled. (Can't\n  // remove from the queue because you can't remove arbitrary nodes from an\n  // array based heap, only the first one.)\n  task.callback = null;\n}\n\nfunction getCurrentPriorityLevel() {\n  return currentPriorityLevel;\n}\n\nlet isMessageLoopRunning = false;\nlet scheduledHostCallback = null;\nlet taskTimeoutID = -1;\n\n// Scheduler periodically yields in case there is other work on the main\n// thread, like user events. By default, it yields multiple times per frame.\n// It does not attempt to align with frame boundaries, since most tasks don't\n// need to be frame aligned; for those that do, use requestAnimationFrame.\nlet yieldInterval = 16;\n\n// TODO: Make this configurable\n// TODO: Adjust this based on priority?\nconst maxYieldInterval = 300;\nlet needsPaint = false;\nlet queueStartTime = -1;\n\nfunction shouldYieldToHost() {\n  if (needsPaint) {\n    // There's a pending paint (signaled by `requestPaint`). Yield now.\n    return true;\n  }\n  const timeElapsed = getCurrentTime() - queueStartTime;\n  if (timeElapsed < yieldInterval) {\n    // The main thread has only been blocked for a really short amount of time;\n    // smaller than a single frame. Don't yield yet.\n    return false;\n  }\n\n  // The main thread has been blocked for a non-negligible amount of time. We\n  // may want to yield control of the main thread, so the browser can perform\n  // high priority tasks. The main ones are painting and user input. If there's\n  // a pending paint or a pending input, then we should yield. But if there's\n  // neither, then we can yield less often while remaining responsive. We'll\n  // eventually yield regardless, since there could be a pending paint that\n  // wasn't accompanied by a call to `requestPaint`, or other main thread tasks\n  // like network events.\n\n  // we don't support isInputPending currently\n  /*if (enableIsInputPending) {\n    if (needsPaint) {\n      // There's a pending paint (signaled by `requestPaint`). Yield now.\n      return true;\n    }\n    if (timeElapsed < continuousInputInterval) {\n      // We haven't blocked the thread for that long. Only yield if there's a\n      // pending discrete input (e.g. click). It's OK if there's pending\n      // continuous input (e.g. mouseover).\n      if (isInputPending !== null) {\n        return isInputPending();\n      }\n    } else if (timeElapsed < maxInterval) {\n      // Yield if there's either a pending discrete or continuous input.\n      if (isInputPending !== null) {\n        return isInputPending(continuousOptions);\n      }\n    } else {\n      // We've blocked the thread for a long time. Even if there's no pending\n      // input, there may be some other scheduled work that we don't know about,\n      // like a network event. Yield now.\n      return true;\n    }\n  }*/\n\n  // `isInputPending` isn't available. Yield now.\n  return true;\n}\n\nfunction requestPaint() {\n  needsPaint = true;\n  // we don't support isInputPending currently\n  /*if (\n    enableIsInputPending &&\n    navigator !== undefined &&\n    (navigator as any).scheduling !== undefined &&\n    (navigator as any).scheduling.isInputPending !== undefined\n  ) {\n    needsPaint = true;\n  }*/\n}\n\nfunction forceFrameRate(fps) {\n  if (fps < 0 || fps > 125) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      console.error(\n        'forceFrameRate takes a positive int between 0 and 125, ' +\n          'forcing frame rates higher than 125 fps is not supported'\n      );\n    }\n    return;\n  }\n  if (fps > 0) {\n    yieldInterval = Math.floor(1000 / fps);\n  } else {\n    // reset the framerate\n    yieldInterval = 5;\n  }\n  // be aware of browser housekeeping work (~6ms per frame)\n  // according to https://developers.google.com/web/fundamentals/performance/rendering\n  yieldInterval = Math.max(5, yieldInterval - 6);\n}\n\nconst performWorkUntilDeadline = () => {\n  if (scheduledHostCallback !== null) {\n    const currentTime = getCurrentTime();\n    // Yield after `yieldInterval` ms, regardless of where we are in the vsync\n    // cycle. This means there's always time remaining at the beginning of\n    // the message event.\n    queueStartTime = currentTime;\n    const hasTimeRemaining = true;\n\n    // If a scheduler task throws, exit the current browser task so the\n    // error can be observed.\n    //\n    // Intentionally not using a try-catch, since that makes some debugging\n    // techniques harder. Instead, if `scheduledHostCallback` errors, then\n    // `hasMoreWork` will remain true, and we'll continue the work loop.\n    let hasMoreWork = true;\n    try {\n      hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);\n    } finally {\n      if (hasMoreWork) {\n        // If there's more work, schedule the next message event at the end\n        // of the preceding one.\n        schedulePerformWorkUntilDeadline();\n      } else {\n        isMessageLoopRunning = false;\n        scheduledHostCallback = null;\n      }\n    }\n  } else {\n    isMessageLoopRunning = false;\n  }\n  // Yielding to the browser will give it a chance to paint, so we can\n  // reset this.\n  needsPaint = false;\n};\n\nlet schedulePerformWorkUntilDeadline;\nif (typeof setImmediate === 'function') {\n  // Node.js and old IE.\n  // There's a few reasons for why we prefer setImmediate.\n  //\n  // Unlike MessageChannel, it doesn't prevent a Node.js process from exiting.\n  // (Even though this is a DOM fork of the Scheduler, you could get here\n  // with a mix of Node.js 15+, which has a MessageChannel, and jsdom.)\n  // https://github.com/facebook/react/issues/20756\n  //\n  // But also, it runs earlier which is the semantic we want.\n  // If other browsers ever implement it, it's better to use it.\n  // Although both of these would be inferior to native scheduling.\n  schedulePerformWorkUntilDeadline = () => {\n    setImmediate(performWorkUntilDeadline);\n  };\n} else if (typeof messageChannel !== 'undefined') {\n  const channel: MessageChannel = new messageChannel();\n  const port = channel.port2;\n\n  channel.port1.onmessage = performWorkUntilDeadline;\n  schedulePerformWorkUntilDeadline = () => {\n    port.postMessage(null);\n  };\n} else {\n  // We should only fallback here in non-browser environments.\n  schedulePerformWorkUntilDeadline = () => {\n    setTimeout(performWorkUntilDeadline, 0);\n  };\n}\n\nfunction requestHostCallback(callback) {\n  scheduledHostCallback = callback;\n  if (!isMessageLoopRunning) {\n    isMessageLoopRunning = true;\n    schedulePerformWorkUntilDeadline();\n  }\n}\n\nfunction requestHostTimeout(callback, ms) {\n  taskTimeoutID = setTimeout(() => {\n    callback(getCurrentTime());\n  }, ms);\n}\n\nfunction cancelHostTimeout() {\n  clearTimeout(taskTimeoutID);\n  taskTimeoutID = -1;\n}\n\nconst _requestPaint = requestPaint;\n\nexport {\n  runWithPriority,\n  next,\n  scheduleCallback,\n  cancelCallback,\n  wrapCallback,\n  getCurrentPriorityLevel,\n  shouldYieldToHost as shouldYield,\n  _requestPaint as requestPaint,\n  continueExecution,\n  pauseExecution,\n  getFirstCallbackNode,\n  getCurrentTime as now,\n  forceFrameRate as forceFrameRate,\n};\n"]}