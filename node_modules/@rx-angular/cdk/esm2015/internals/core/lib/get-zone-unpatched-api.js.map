{"version":3,"file":"get-zone-unpatched-api.js","sourceRoot":"","sources":["../../../../../../../libs/cdk/internals/core/src/lib/get-zone-unpatched-api.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,eAAe,CAAC;AAsBxC,MAAM,UAAU,mBAAmB,CACjC,YAAwB,EACxB,IAAQ;IAER,6EAA6E;IAC7E,sEAAsE;IACtE,mFAAmF;IACnF,IAAI,OAAO,YAAY,KAAK,QAAQ,EAAE;QACpC,IAAI,GAAG,YAAiB,CAAC;QACzB,YAAY,GAAG,OAAY,CAAC;KAC7B;IACD,OAAO,YAAY,CAAC,iBAAiB,GAAG,IAAI,CAAC,IAAI,YAAY,CAAC,IAAI,CAAC,CAAC;AACtE,CAAC","sourcesContent":["import { ɵglobal } from '@angular/core';\n\n/**\n * @description\n *\n * This function returns the zone un-patched API for the a specific Browser API.\n * If no target is passed the window is used instead\n *\n * @param name - The name of the API to check.\n * @param target - The target to get un-patched API from.\n * @return {Function} - The zone un-patched API in question.\n *\n */\nexport function getZoneUnPatchedApi<\n  N extends keyof (Window & typeof globalThis)\n>(name: N): (Window & typeof globalThis)[N];\n\nexport function getZoneUnPatchedApi<T extends object, N extends keyof T>(\n  target: T,\n  name: N\n): T[N];\n\nexport function getZoneUnPatchedApi<T extends object, N extends keyof T>(\n  targetOrName: T | string,\n  name?: N\n) {\n  // If the user has provided the API name as the first argument, for instance:\n  // `const addEventListener = getZoneUnPatchedApi('addEventListener');`\n  // Then we just swap arguments and make `global` or `window` as the default target.\n  if (typeof targetOrName === 'string') {\n    name = targetOrName as N;\n    targetOrName = ɵglobal as T;\n  }\n  return targetOrName['__zone_symbol__' + name] || targetOrName[name];\n}\n"]}