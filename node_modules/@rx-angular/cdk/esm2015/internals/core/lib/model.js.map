{"version":3,"file":"model.js","sourceRoot":"","sources":["../../../../../../../libs/cdk/internals/core/src/lib/model.ts"],"names":[],"mappings":"","sourcesContent":["import { Observable } from 'rxjs';\n\n/**\n * Type to specify an object of observables\n */\nexport type ObservableMap = Record<string, Observable<any>>;\n\n/**\n * Type to map `ObservableMap` to a static record type\n * the 'in' syntax forces the type specification by key\n */\nexport type ObservableAccumulation<T extends ObservableMap> = {\n  [K in keyof T]: ExtractObservableValue<T[K]>;\n};\n\n/**\n * This type avoids empty objects\n */\nexport type NotEmpty<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &\n  U[keyof U];\n\nexport type ExtractObservableValue<T> = T extends Observable<infer R>\n  ? R\n  : never;\nexport type PropName<T> = keyof T;\nexport type PropType<T> = T[PropName<T>];\n\n/**\n * Typed reducer function for the `Array#reduce` method.\n */\nexport type ArrayReducerFn<T extends Record<string, any>> = (\n  acc: T,\n  cur?: PropType<T>,\n  idx?: number\n) => T;\n"]}