import { Observable } from 'rxjs';
import { mapTo, concatMap } from 'rxjs/operators';
import { getZoneUnPatchedApi } from './get-zone-unpatched-api';
/**
 * Creates an Observable that emits after a setTimeout.
 * The timeout it unpatched to not avoid zone pollution
 * @param setTimeoutFn
 */
function timeout(delay = 0) {
    return new Observable((subscriber) => {
        const asyncID = getZoneUnPatchedApi('setTimeout')(() => subscriber.next(0), delay);
        return () => {
            getZoneUnPatchedApi('clearTimeout')(asyncID);
        };
    });
}
/**
 *
 */
export function timeoutSwitchMapWith() {
    return (o$) => o$.pipe(concatMap((v) => timeout().pipe(mapTo(v))));
}
//# sourceMappingURL=timeout.js.map