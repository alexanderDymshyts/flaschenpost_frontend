{"version":3,"file":"rx-materialize.js","sourceRoot":"","sources":["../../../../../../libs/cdk/notifications/src/lib/rx-materialize.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,GAAG,EAAE,WAAW,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AAIvD,MAAM,UAAU,aAAa;IAC3B,OAAO,CAAC,EAAE,EAAE,EAAE,CACZ,EAAE,CAAC,IAAI,CACL,WAAW,EAAE,EACb,GAAG,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE,EAAE;QACtB,0DAA0D;QAC1D,IAAI,IAAI,KAAK,GAAG,EAAE;YAChB,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;SACtB;IACH,CAAC,CAAC,EACF,GAAG,CAAC,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE,EAAE;QACvC,MAAM,kBAAkB,GAAG,oCAAoC,CAAC,IAAI,CAAC,CAAC;QACtE,OAAO;YACL,KAAK;YACL,QAAQ;YACR,KAAK;YACL,IAAI,EAAE,kBAAkB;YACxB,QAAQ,EAAE,kBAAkB,8BAAgC;SAC7D,CAAC;IACJ,CAAC,CAAC,CACH,CAAC;AACN,CAAC;AAED;;;;;;;GAOG;AACH,MAAM,UAAU,oCAAoC,CAClD,IAAmC;IAEnC,QAAQ,IAAI,EAAE;QACZ,KAAK,GAAG;YACN,iCAAmC;QACrC,KAAK,GAAG;YACN,2BAAgC;QAClC,KAAK,GAAG,CAAC;QACT;YACE,yBAA+B;KAClC;AACH,CAAC","sourcesContent":["import { OperatorFunction, Notification } from 'rxjs';\nimport { map, materialize, tap } from 'rxjs/operators';\n\nimport { RxNotification, RxNotificationKind } from './model';\n\nexport function rxMaterialize<T>(): OperatorFunction<T, RxNotification<T>> {\n  return (o$) =>\n    o$.pipe(\n      materialize(),\n      tap(({ kind, error }) => {\n        // As we dont want to just swallow errors we log them here\n        if (kind === 'E') {\n          console.error(error);\n        }\n      }),\n      map(({ value, error, kind, hasValue }) => {\n        const rxNotificationKind = notificationKindToRxNotificationKind(kind);\n        return {\n          value,\n          hasValue,\n          error,\n          kind: rxNotificationKind,\n          complete: rxNotificationKind === RxNotificationKind.Complete,\n        };\n      })\n    );\n}\n\n/**\n * @internal\n *\n * @description\n * This function is here to turn RxJS notification kind values into RxNotification kind names.\n * The main reason for the naming is the RxNotification kind values map directly to the default\n * template names (`suspense`, `next`, `error` `complete`) in the directives of the template package\n */\nexport function notificationKindToRxNotificationKind(\n  kind: Notification<unknown>['kind']\n): RxNotificationKind {\n  switch (kind) {\n    case 'C':\n      return RxNotificationKind.Complete;\n    case 'E':\n      return RxNotificationKind.Error;\n    case 'N':\n    default:\n      return RxNotificationKind.Next;\n  }\n}\n"]}