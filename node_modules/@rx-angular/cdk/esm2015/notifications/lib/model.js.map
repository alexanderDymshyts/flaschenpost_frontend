{"version":3,"file":"model.js","sourceRoot":"","sources":["../../../../../../libs/cdk/notifications/src/lib/model.ts"],"names":[],"mappings":"","sourcesContent":["export const enum RxNotificationKind {\n  Suspense = 'suspense',\n  Next = 'next',\n  Error = 'error',\n  Complete = 'complete',\n}\n\nexport type RxNotificationValue = 'value' | 'hasValue';\n\nexport interface RxNextNotification<T> {\n  value: T;\n  /**\n   * @deprecated Instead just check if RxNotificationKind is Next\n   */\n  hasValue: boolean;\n  kind: RxNotificationKind;\n  error: boolean;\n  complete: boolean;\n}\n\nexport interface RxSuspenseNotification<T> {\n  value: T;\n  /**\n   * @deprecated Instead just check if RxNotificationKind is Next\n   */\n  hasValue: boolean;\n  kind: RxNotificationKind.Suspense;\n  error: false;\n  complete: false;\n}\n\nexport interface RxErrorNotification<T> {\n  value: T;\n  /**\n   * @deprecated Instead just check if RxNotificationKind is Next\n   */\n  hasValue: boolean;\n  kind: RxNotificationKind.Error;\n  error: any;\n  complete: false;\n}\n\nexport interface RxCompleteNotification<T> {\n  value: T;\n  /**\n   * @deprecated Instead just check if RxNotificationKind is Next\n   */\n  hasValue: boolean;\n  kind: RxNotificationKind.Complete;\n  complete: boolean;\n  error: false;\n}\n\nexport type RxNotification<T> =\n  | RxNextNotification<T>\n  | RxSuspenseNotification<T>\n  | RxErrorNotification<T>\n  | RxCompleteNotification<T>;\n"]}