import { map, materialize, tap } from 'rxjs/operators';
export function rxMaterialize() {
    return (o$) => o$.pipe(materialize(), tap(({ kind, error }) => {
        // As we dont want to just swallow errors we log them here
        if (kind === 'E') {
            console.error(error);
        }
    }), map(({ value, error, kind, hasValue }) => {
        const rxNotificationKind = notificationKindToRxNotificationKind(kind);
        return {
            value,
            hasValue,
            error,
            kind: rxNotificationKind,
            complete: rxNotificationKind === "complete" /* Complete */,
        };
    }));
}
/**
 * @internal
 *
 * @description
 * This function is here to turn RxJS notification kind values into RxNotification kind names.
 * The main reason for the naming is the RxNotification kind values map directly to the default
 * template names (`suspense`, `next`, `error` `complete`) in the directives of the template package
 */
export function notificationKindToRxNotificationKind(kind) {
    switch (kind) {
        case 'C':
            return "complete" /* Complete */;
        case 'E':
            return "error" /* Error */;
        case 'N':
        default:
            return "next" /* Next */;
    }
}
//# sourceMappingURL=rx-materialize.js.map