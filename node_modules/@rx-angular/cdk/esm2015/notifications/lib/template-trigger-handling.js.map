{"version":3,"file":"template-trigger-handling.js","sourceRoot":"","sources":["../../../../../../libs/cdk/notifications/src/lib/template-trigger-handling.ts"],"names":[],"mappings":"AAAA,OAAO,EAAc,OAAO,EAAE,MAAM,MAAM,CAAC;AAC3C,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,gBAAgB,CAAC;AAEjD,OAAO,EAAE,gBAAgB,EAAE,MAAM,0BAA0B,CAAC;AAI5D;;;;;;GAMG;AACH,MAAM,UAAU,uBAAuB;IAIrC,MAAM,YAAY,GAAG,gBAAgB,CACnC,GAAG,EAAE,CAAC,IAAI,OAAO,EAAqD,EACtE,QAAQ,EAAE,CACX,CAAC;IACF,OAAO;QACL,IAAI,CAAC,YAA+D;YAClE,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAClC,CAAC;QACD,QAAQ,EAAE,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;KAC7C,CAAC;AACJ,CAAC","sourcesContent":["import { Observable, Subject } from 'rxjs';\nimport { mergeAll, share } from 'rxjs/operators';\n\nimport { coerceAllFactory } from '@rx-angular/cdk/coercing';\n\nimport { RxNotification } from './model';\n\n/**\n * @internal\n *\n * A factory function returning an object to handle the process of switching templates by Notification channel.\n * You can next a Observable of `RxNotification` multiple times and merge them into the Observable exposed under `trigger$`\n *\n */\nexport function templateTriggerHandling<T>(): {\n  trigger$: Observable<RxNotification<T>>;\n  next(templateName: Observable<RxNotification<T>>): void;\n} {\n  const hotFlattened = coerceAllFactory(\n    () => new Subject<Observable<RxNotification<T> | RxNotification<T>>>(),\n    mergeAll()\n  );\n  return {\n    next(templateName: Observable<RxNotification<T> | RxNotification<T>>) {\n      hotFlattened.next(templateName);\n    },\n    trigger$: hotFlattened.values$.pipe(share()),\n  };\n}\n"]}