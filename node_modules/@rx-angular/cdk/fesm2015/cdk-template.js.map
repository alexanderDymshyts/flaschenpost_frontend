{"version":3,"file":"cdk-template.js","sources":["../../../../libs/cdk/template/src/lib/utils.ts","../../../../libs/cdk/template/src/lib/model.ts","../../../../libs/cdk/template/src/lib/render-error.ts","../../../../libs/cdk/template/src/lib/template-manager.ts","../../../../libs/cdk/template/src/lib/list-view-handler.ts","../../../../libs/cdk/template/src/lib/list-template-manager.ts","../../../../libs/cdk/template/src/lib/list-view-context.ts","../../../../libs/cdk/template/src/cdk-template.ts"],"sourcesContent":["import {\n  ChangeDetectorRef,\n  EmbeddedViewRef,\n  NgZone,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  onStrategy,\n  RxStrategyCredentials,\n} from '@rx-angular/cdk/render-strategies';\nimport { concat, MonoTypeOperatorFunction, of } from 'rxjs';\nimport { ignoreElements, switchMap } from 'rxjs/operators';\n\n/**\n * @internal\n * creates an embeddedViewRef\n *\n * @param viewContainerRef\n * @param templateRef\n * @param context\n * @param index\n * @return EmbeddedViewRef<C>\n */\nexport function createEmbeddedView<C>(\n  viewContainerRef: ViewContainerRef,\n  templateRef: TemplateRef<C>,\n  context: C,\n  index = 0\n): EmbeddedViewRef<C> {\n  const view = viewContainerRef.createEmbeddedView(templateRef, context, index);\n  view.detectChanges();\n  return view;\n}\n\n/**\n * @internal\n *\n * A factory function returning an object to handle `TemplateRef`'s.\n * You can add and get a `TemplateRef`.\n *\n */\nexport function templateHandling<N, C>(\n  viewContainerRef: ViewContainerRef\n): {\n  add(name: N, templateRef: TemplateRef<C>): void;\n  get(name: N): TemplateRef<C>;\n  createEmbeddedView(name: N, context?: C, index?: number): EmbeddedViewRef<C>;\n} {\n  const templateCache = new Map<N, TemplateRef<C>>();\n\n  const get = (name: N): TemplateRef<C> => {\n    return templateCache.get(name);\n  };\n  return {\n    add(name: N, templateRef: TemplateRef<C>): void {\n      assertTemplate(name, templateRef);\n      if (!templateCache.has(name)) {\n        templateCache.set(name, templateRef);\n      } else {\n        throw new Error(\n          'Updating an already existing Template is not supported at the moment.'\n        );\n      }\n    },\n    get,\n    createEmbeddedView: (name: N, context?: C) =>\n      createEmbeddedView(viewContainerRef, get(name), context),\n  };\n\n  //\n  function assertTemplate<T>(\n    property: any,\n    templateRef: TemplateRef<T> | null\n  ): templateRef is TemplateRef<T> {\n    const isTemplateRefOrNull = !!(\n      !templateRef || templateRef.createEmbeddedView\n    );\n    if (!isTemplateRefOrNull) {\n      throw new Error(\n        `${property} must be a TemplateRef, but received something else.`\n      );\n    }\n    return isTemplateRefOrNull;\n  }\n}\n\n/**\n * @internal\n *\n * A side effect operator similar to `tap` but with a static internal logic.\n * It calls detect changes on the 'VirtualParent' and the injectingViewCdRef.\n *\n * @param injectingViewCdRef\n * @param strategy\n * @param notifyNeeded\n * @param ngZone\n */\nexport function notifyAllParentsIfNeeded<T>(\n  injectingViewCdRef: ChangeDetectorRef,\n  strategy: RxStrategyCredentials,\n  notifyNeeded: () => boolean,\n  ngZone?: NgZone\n): MonoTypeOperatorFunction<T> {\n  return (o$) =>\n    o$.pipe(\n      switchMap((v) => {\n        const notifyParent = notifyNeeded();\n        if (!notifyParent) {\n          return of(v);\n        }\n        return concat(\n          of(v),\n          onStrategy(\n            injectingViewCdRef,\n            strategy,\n            (_v, work, options) => {\n              /*console.log(\n               'notifyAllParentsIfNeeded injectingView',\n               (injectingViewCdRef as any).context\n               );*/\n              work(injectingViewCdRef, options.scope);\n            },\n            {\n              scope: (injectingViewCdRef as any).context || injectingViewCdRef,\n              ngZone,\n            }\n          ).pipe(ignoreElements())\n        );\n      })\n    );\n}\n","import {\n  ChangeDetectorRef,\n  EmbeddedViewRef,\n  ErrorHandler,\n  NgZone,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { RxNotification } from '@rx-angular/cdk/notifications';\nimport { RxStrategies } from '@rx-angular/cdk/render-strategies';\n\nexport type rxBaseTemplateNames = 'errorTpl' | 'completeTpl' | 'suspenseTpl';\n\nexport enum RxBaseTemplateNames {\n  error = 'errorTpl',\n  complete = 'completeTpl',\n  suspense = 'suspenseTpl',\n}\n\nexport const enum RxListTemplateChangeType {\n  insert,\n  remove,\n  move,\n  update,\n  context,\n}\n// [value, index, oldIndex?]\nexport type RxListTemplateChangePayload<T> = [T, number, number?];\nexport type RxListTemplateChange<T = any> = [\n  RxListTemplateChangeType,\n  RxListTemplateChangePayload<T>\n];\nexport type RxListTemplateChanges<T = any> = [\n  RxListTemplateChange<T>[], // changes to apply\n  boolean // notify parent\n];\n\nexport interface RxViewContext<T> {\n  // to enable `let` syntax we have to use $implicit (var; let v = var)\n  $implicit: T;\n  // set context var complete to true (var$; let e = $error)\n  error: boolean | Error;\n  // set context var complete to true (var$; let c = $complete)\n  complete: boolean;\n  // set context var suspense to true (var$; let s = $suspense)\n  suspense: boolean;\n}\n\nexport interface RxRenderAware<T> {\n  nextStrategy: (nextConfig: string | Observable<string>) => void;\n  render: (values$: Observable<RxNotification<T>>) => Observable<void>;\n}\n\nexport interface RxRenderSettings {\n  cdRef: ChangeDetectorRef;\n  parent: boolean;\n  patchZone: NgZone | false;\n  strategies: RxStrategies<string>;\n  defaultStrategyName: string;\n  errorHandler?: ErrorHandler;\n}\n\nexport type CreateEmbeddedView<C> = (\n  viewContainerRef: ViewContainerRef,\n  patchZone: NgZone | false\n) => (\n  templateRef: TemplateRef<C>,\n  context?: C,\n  index?: number\n) => EmbeddedViewRef<C>;\n\nexport type CreateViewContext<T, C, U = unknown> = (\n  value: T,\n  computedContext: U\n) => C;\n\nexport type UpdateViewContext<T, C, U = unknown> = (\n  value: T,\n  view: EmbeddedViewRef<C>,\n  computedContext?: U\n) => void;\n\nexport interface RxTemplateSettings<T, C> {\n  viewContainerRef: ViewContainerRef;\n  customContext?: (value: T) => Partial<C>;\n}\n\nexport interface RxListTemplateSettings<T, C, U = unknown> {\n  viewContainerRef: ViewContainerRef;\n  createViewContext: CreateViewContext<T, C, U>;\n  updateViewContext: UpdateViewContext<T, C, U>;\n  initialTemplateRef?: TemplateRef<C>;\n}\n","import { ErrorHandler } from '@angular/core';\n\n/** @internal **/\nexport type RxRenderError<T> = [Error, T];\n\n/** @internal **/\nexport type RxRenderErrorFactory<T, E> = (\n  error: Error,\n  value: T\n) => RxRenderError<E>;\n\n/** @internal **/\nexport function isRxRenderError<T>(e: any): e is RxRenderError<T> {\n  return (\n    e != null && Array.isArray(e) && e.length === 2 && e[0] instanceof Error\n  );\n}\n\n/** @internal **/\nexport function createErrorHandler(\n  _handler?: ErrorHandler\n): ErrorHandler {\n  const _handleError = _handler\n    ? (e) => _handler.handleError(e)\n    : console.error;\n  return {\n    handleError: (error) => {\n      if (isRxRenderError(error)) {\n        _handleError(error[0]);\n        console.error('additionalErrorContext', error[1]);\n      } else {\n        _handleError(error);\n      }\n    },\n  };\n}\n\n/** @internal **/\nexport function toRenderError<T>(e: Error, context: T): RxRenderError<T> {\n  return [e, context];\n}\n","import { EmbeddedViewRef, TemplateRef } from '@angular/core';\nimport { RxCoalescingOptions } from '@rx-angular/cdk/coalescing';\nimport {\n  RxCompleteNotification,\n  RxErrorNotification,\n  RxNextNotification,\n  RxNotification,\n  RxNotificationKind,\n  RxSuspenseNotification,\n} from '@rx-angular/cdk/notifications';\nimport {\n  onStrategy,\n  RxRenderWork,\n  strategyHandling,\n} from '@rx-angular/cdk/render-strategies';\nimport { EMPTY, merge, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  map,\n  switchMap,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport {\n  rxBaseTemplateNames,\n  RxRenderAware,\n  RxRenderSettings,\n  RxTemplateSettings,\n  RxViewContext,\n} from './model';\nimport { createErrorHandler } from './render-error';\nimport { notifyAllParentsIfNeeded, templateHandling } from './utils';\n\nexport interface RxTemplateManager<\n  T,\n  C extends RxViewContext<T>,\n  N = rxBaseTemplateNames | string\n> extends RxRenderAware<T> {\n  addTemplateRef: (name: N, templateRef: TemplateRef<C>) => void;\n}\n\n/**\n * @internal\n *\n * A factory function that returns a map of projections to turn a notification of a Observable (next, error, complete)\n *\n * @param customNextContext - projection function to provide custom properties as well as override existing\n */\nexport function notificationKindToViewContext<T>(\n  customNextContext: (value: T) => object\n): RxViewContextMap<T> {\n  // @TODO rethink overrides\n  return {\n    suspense: (notification: RxSuspenseNotification<T>) => {\n      const $implicit: T | null | undefined = notification.value as T;\n      return {\n        $implicit,\n        suspense: true,\n        error: false,\n        complete: false,\n        ...customNextContext($implicit),\n      };\n    },\n    next: (notification: RxNextNotification<T>) => {\n      const $implicit: T | null | undefined = notification.value as T;\n      return {\n        $implicit,\n        suspense: false,\n        error: false,\n        complete: false,\n        ...customNextContext($implicit),\n      };\n    },\n    error: (notification: RxErrorNotification<T>) => {\n      const $implicit: T | null | undefined = notification.value as T;\n      return {\n        $implicit,\n        complete: false,\n        error: notification.error || true,\n        suspense: false,\n        ...customNextContext($implicit),\n      };\n    },\n    complete: (notification: RxCompleteNotification<T>) => {\n      const $implicit: T | null | undefined = notification.value as T;\n      return {\n        $implicit,\n        error: false,\n        complete: true,\n        suspense: false,\n        ...customNextContext($implicit),\n      };\n    },\n  };\n}\nexport type RxViewContextMap<T> = Record<\n  RxNotificationKind,\n  (value?: any) => Partial<RxViewContext<T>>\n>;\n\nexport type RxNotificationTemplateNameMap<T, C, N> = Record<\n  RxNotificationKind,\n  (value?: T, templates?: { get: (name: N) => TemplateRef<C> }) => N\n>;\n\nexport function createTemplateManager<\n  T,\n  C extends RxViewContext<T>,\n  N extends string = string\n>(config: {\n  renderSettings: RxRenderSettings;\n  templateSettings: RxTemplateSettings<T, C>;\n  templateTrigger$?: Observable<RxNotificationKind>;\n  notificationToTemplateName: RxNotificationTemplateNameMap<T, C, N>;\n}): RxTemplateManager<T, C, N> {\n  const { renderSettings, notificationToTemplateName, templateSettings } =\n    config;\n  const {\n    defaultStrategyName,\n    strategies,\n    cdRef: injectingViewCdRef,\n    patchZone,\n    parent,\n  } = renderSettings;\n\n  const errorHandler = createErrorHandler(renderSettings.errorHandler);\n  const ngZone = patchZone ? patchZone : undefined;\n\n  let activeTemplate: N;\n\n  const strategyHandling$ = strategyHandling(defaultStrategyName, strategies);\n  const templates = templateHandling<N, C>(templateSettings.viewContainerRef);\n  const viewContainerRef = templateSettings.viewContainerRef;\n\n  const triggerHandling = config.templateTrigger$ || EMPTY;\n  const getContext = notificationKindToViewContext(\n    templateSettings.customContext || (() => ({}))\n  );\n\n  return {\n    addTemplateRef: (name: N, templateRef: TemplateRef<C>) => {\n      templates.add(name, templateRef);\n    },\n    nextStrategy: strategyHandling$.next,\n    render(values$: Observable<RxNotification<T>>): Observable<any> {\n      let trg: RxNotificationKind | undefined;\n      let notification: RxNotification<T> = {\n        value: undefined,\n        complete: false,\n        error: false,\n        kind: RxNotificationKind.Suspense,\n        hasValue: false,\n      };\n\n      return merge(\n        values$.pipe(tap((n) => (notification = n))),\n        triggerHandling.pipe(\n          tap<RxNotificationKind>((trigger) => (trg = trigger))\n        )\n      ).pipe(\n        map(() => {\n          const contextKind: RxNotificationKind = trg || notification.kind;\n          trg = undefined;\n          const value: T = notification.value as T;\n          const templateName = notificationToTemplateName[contextKind](\n            value,\n            templates\n          );\n          const template = templates.get(templateName);\n          return { template, templateName, notification, contextKind };\n        }),\n        withLatestFrom(strategyHandling$.strategy$),\n        // Cancel old renders\n        switchMap(\n          ([\n            { template, templateName, notification, contextKind },\n            strategy,\n          ]) => {\n            const isNewTemplate = activeTemplate !== templateName || !template;\n            const notifyParent = isNewTemplate && parent;\n            return onStrategy(\n              notification.value,\n              strategy,\n              (v: T, work: RxRenderWork, options: RxCoalescingOptions) => {\n                const context = <C>getContext[contextKind](notification);\n                if (isNewTemplate) {\n                  // template has changed (undefined => next; suspense => next; ...)\n                  // handle remove & insert\n                  // remove current view if there is any\n                  if (viewContainerRef.length > 0) {\n                    // patch removal if needed\n                    viewContainerRef.clear();\n                  }\n                  // create new view if any\n                  if (template) {\n                    // createEmbeddedView is already patched, no need for workFactory\n                    templates.createEmbeddedView(templateName, context);\n                  }\n                } else if (template) {\n                  // template didn't change, update it\n                  // handle update\n                  const view = <EmbeddedViewRef<C>>viewContainerRef.get(0);\n                  Object.keys(context).forEach((k) => {\n                    view.context[k] = context[k];\n                  });\n                  // update view context, patch if needed\n                  work(view, options.scope, notification);\n                }\n                activeTemplate = templateName;\n              },\n              { ngZone }\n              // we don't need to specify any scope here. The template manager is the only one\n              // who will call `viewRef#detectChanges` on any of the templates it manages.\n              // whenever a new value comes in, any pre-scheduled work of this taskManager will\n              // be nooped before a new work will be scheduled. This happens because of the implementation\n              // of `StrategyCredential#behavior`\n            ).pipe(\n              notifyAllParentsIfNeeded(\n                injectingViewCdRef,\n                strategy,\n                () => notifyParent,\n                ngZone\n              ),\n              catchError((e) => {\n                errorHandler.handleError(e);\n                return of(e);\n              })\n            );\n          }\n        )\n      );\n    },\n  };\n}\n","import {\n  RxListTemplateChange,\n  RxListTemplateChanges,\n  RxListTemplateChangeType,\n  RxListTemplateSettings,\n} from './model';\nimport { EmbeddedViewRef, IterableChanges } from '@angular/core';\nimport { RxListViewContext } from './list-view-context';\nimport { createEmbeddedView } from './utils';\n\n/**\n * @internal\n *\n * Factory that returns a `ListTemplateManager` for the passed params.\n *\n * @param templateSettings\n */\nexport function getTemplateHandler<C extends RxListViewContext<T>, T>(\n  templateSettings: Omit<RxListTemplateSettings<T, C>, 'patchZone'>\n): ListTemplateManager<T> {\n  const {\n    viewContainerRef,\n    initialTemplateRef,\n    createViewContext,\n    updateViewContext,\n  } = templateSettings;\n\n  return {\n    updateUnchangedContext,\n    insertView,\n    moveView,\n    removeView,\n    getListChanges,\n    updateView,\n  };\n\n  // =====\n\n  function updateUnchangedContext(item: T, index: number, count: number) {\n    const view = <EmbeddedViewRef<C>>viewContainerRef.get(index);\n    updateViewContext(item, view, {\n      count,\n      index,\n    });\n    view.detectChanges();\n  }\n\n  function moveView(\n    oldIndex: number,\n    item: T,\n    index: number,\n    count: number\n  ): void {\n    const oldView = viewContainerRef.get(oldIndex);\n    const view = <EmbeddedViewRef<C>>viewContainerRef.move(oldView, index);\n    updateViewContext(item, view, {\n      count,\n      index,\n    });\n    view.detectChanges();\n  }\n\n  function updateView(item: T, index: number, count: number): void {\n    const view = <EmbeddedViewRef<C>>viewContainerRef.get(index);\n    updateViewContext(item, view, {\n      count,\n      index,\n    });\n    view.detectChanges();\n  }\n\n  function removeView(index: number): void {\n    return viewContainerRef.remove(index);\n  }\n\n  function insertView(item: T, index: number, count: number): void {\n    createEmbeddedView(\n      viewContainerRef,\n      initialTemplateRef,\n      createViewContext(item, {\n        count,\n        index,\n      }),\n      index\n    );\n  }\n}\n\n/**\n * @internal\n *\n * An object that holds methods needed to introduce actions to a list e.g. move, remove, insert\n */\nexport interface ListTemplateManager<T> {\n  updateUnchangedContext(item: T, index: number, count: number): void;\n\n  insertView(item: T, index: number, count: number): void;\n\n  moveView(oldIndex: number, item: T, index: number, count: number): void;\n\n  updateView(item: T, index: number, count: number): void;\n\n  removeView(index: number): void;\n\n  getListChanges(\n    changes: IterableChanges<T>,\n    items: T[]\n  ): RxListTemplateChanges;\n}\n\n/**\n * @internal\n *\n * @param changes\n * @param items\n */\nfunction getListChanges<T>(\n  changes: IterableChanges<T>,\n  items: T[]\n): RxListTemplateChanges {\n  const changedIdxs = new Set<T>();\n  const changesArr: RxListTemplateChange[] = [];\n  let notifyParent = false;\n  changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n    const item = record.item;\n    if (record.previousIndex == null) {\n      // insert\n      changesArr.push(\n        getInsertChange(item, currentIndex === null ? undefined : currentIndex)\n      );\n      changedIdxs.add(item);\n      notifyParent = true;\n    } else if (currentIndex == null) {\n      // remove\n      changesArr.push(\n        getRemoveChange(\n          item,\n          adjustedPreviousIndex === null ? undefined : adjustedPreviousIndex\n        )\n      );\n      notifyParent = true;\n    } else if (adjustedPreviousIndex !== null) {\n      // move\n      changesArr.push(getMoveChange(item, currentIndex, adjustedPreviousIndex));\n      changedIdxs.add(item);\n      notifyParent = true;\n    }\n  });\n  changes.forEachIdentityChange((record) => {\n    const item = record.item;\n    if (!changedIdxs.has(item)) {\n      changesArr.push(getUpdateChange(item, record.currentIndex));\n      changedIdxs.add(item);\n    }\n  });\n  items.forEach((item, index) => {\n    if (!changedIdxs.has(item)) {\n      changesArr.push(getUnchangedChange(item, index));\n    }\n  });\n  return [changesArr, notifyParent];\n\n  // ==========\n\n  function getMoveChange(\n    item: T,\n    currentIndex: number,\n    adjustedPreviousIndex: number\n  ): RxListTemplateChange {\n    return [\n      RxListTemplateChangeType.move,\n      [item, currentIndex, adjustedPreviousIndex],\n    ];\n  }\n\n  function getUpdateChange(\n    item: T,\n    currentIndex: number\n  ): RxListTemplateChange {\n    return [RxListTemplateChangeType.update, [item, currentIndex]];\n  }\n\n  function getUnchangedChange(item: T, index: number): RxListTemplateChange {\n    return [RxListTemplateChangeType.context, [item, index]];\n  }\n\n  function getInsertChange(\n    item: T,\n    currentIndex: number\n  ): RxListTemplateChange {\n    return [\n      RxListTemplateChangeType.insert,\n      [item, currentIndex === null ? undefined : currentIndex],\n    ];\n  }\n\n  function getRemoveChange(\n    item: T,\n    adjustedPreviousIndex: number\n  ): RxListTemplateChange {\n    return [\n      RxListTemplateChangeType.remove,\n      [\n        item,\n        adjustedPreviousIndex === null ? undefined : adjustedPreviousIndex,\n      ],\n    ];\n  }\n}\n","import {\n  EmbeddedViewRef,\n  IterableChanges,\n  IterableDiffer,\n  IterableDiffers,\n  NgIterable,\n  TemplateRef,\n  TrackByFunction,\n} from '@angular/core';\nimport { combineLatest, MonoTypeOperatorFunction, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  distinctUntilChanged,\n  map,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\nimport {\n  RxStrategyCredentials,\n  onStrategy,\n  strategyHandling,\n} from '@rx-angular/cdk/render-strategies';\nimport {\n  RxListViewComputedContext,\n  RxListViewContext,\n} from './list-view-context';\nimport { getTemplateHandler } from './list-view-handler';\nimport {\n  RxListTemplateChange,\n  RxListTemplateChangeType,\n  RxListTemplateSettings,\n  RxRenderSettings,\n} from './model';\nimport { createErrorHandler } from './render-error';\nimport { notifyAllParentsIfNeeded } from './utils';\n\nexport interface RxListManager<T> {\n  nextStrategy: (config: string | Observable<string>) => void;\n\n  render(changes$: Observable<NgIterable<T>>): Observable<NgIterable<T> | null>;\n}\n\nexport function createListTemplateManager<\n  T,\n  C extends RxListViewContext<T>\n>(config: {\n  renderSettings: RxRenderSettings;\n  templateSettings: RxListTemplateSettings<T, C, RxListViewComputedContext> & {\n    templateRef: TemplateRef<C>;\n  };\n  trackBy: TrackByFunction<T>;\n  iterableDiffers: IterableDiffers;\n}): RxListManager<T> {\n  const { templateSettings, renderSettings, trackBy, iterableDiffers } = config;\n  const {\n    defaultStrategyName,\n    strategies,\n    cdRef: injectingViewCdRef,\n    patchZone,\n    parent,\n  } = renderSettings;\n  const errorHandler = createErrorHandler(renderSettings.errorHandler);\n  const ngZone = patchZone ? patchZone : undefined;\n  const strategyHandling$ = strategyHandling(defaultStrategyName, strategies);\n\n  let _differ: IterableDiffer<T> | undefined;\n  function getDiffer(values: NgIterable<T>): IterableDiffer<T> | null {\n    if (_differ) {\n      return _differ;\n    }\n    return values\n      ? (_differ = iterableDiffers.find(values).create(trackBy))\n      : null;\n  }\n  //               type,  context\n  /* TODO (regarding createView): this is currently not in use. for the list-manager this would mean to provide\n   functions for not only create. developers than should have to provide create, move, remove,... the whole thing.\n   i don't know if this is the right decision for a first RC */\n  const listViewHandler = getTemplateHandler({\n    ...templateSettings,\n    initialTemplateRef: templateSettings.templateRef,\n  });\n  const viewContainerRef = templateSettings.viewContainerRef;\n\n  let notifyParent = false;\n  let changesArr: RxListTemplateChange[];\n  let partiallyFinished = false;\n\n  return {\n    nextStrategy(nextConfig: Observable<string>): void {\n      strategyHandling$.next(nextConfig);\n    },\n    render(\n      values$: Observable<NgIterable<T>>\n    ): Observable<NgIterable<T> | null> {\n      return values$.pipe(render());\n    },\n  };\n\n  function handleError() {\n    return (o$) =>\n      o$.pipe(\n        catchError((err: Error) => {\n          partiallyFinished = false;\n          errorHandler.handleError(err);\n          return of(null);\n        })\n      );\n  }\n\n  function render(): MonoTypeOperatorFunction<NgIterable<T> | null> {\n    return (o$: Observable<NgIterable<T>>): Observable<NgIterable<T> | null> =>\n      combineLatest([\n        o$,\n        strategyHandling$.strategy$.pipe(distinctUntilChanged()),\n      ]).pipe(\n        map(([iterable, strategy]) => {\n          const differ = getDiffer(iterable);\n          let changes: IterableChanges<T>;\n          if (differ) {\n            if (partiallyFinished) {\n              const currentIterable = [];\n              for (let i = 0, ilen = viewContainerRef.length; i < ilen; i++) {\n                const viewRef = <EmbeddedViewRef<C>>viewContainerRef.get(i);\n                currentIterable[i] = viewRef.context.$implicit;\n              }\n              differ.diff(currentIterable);\n            }\n            changes = differ.diff(iterable);\n          }\n          return {\n            changes,\n            iterable,\n            strategy,\n          };\n        }),\n        // Cancel old renders\n        switchMap(({ changes, iterable, strategy }) => {\n          if (!changes) {\n            return of([]);\n          }\n          const values = iterable || [];\n          // TODO: we might want to treat other iterables in a more performant way than Array.from()\n          const items = Array.isArray(values) ? values : Array.from(iterable);\n          const listChanges = listViewHandler.getListChanges(changes, items);\n          changesArr = listChanges[0];\n          const insertedOrRemoved = listChanges[1];\n          const applyChanges$ = getObservablesFromChangesArray(\n            changesArr,\n            strategy,\n            items.length\n          );\n          partiallyFinished = true;\n          notifyParent = insertedOrRemoved && parent;\n          return combineLatest(\n            applyChanges$.length > 0 ? applyChanges$ : [of(null)]\n          ).pipe(\n            tap(() => (partiallyFinished = false)),\n            notifyAllParentsIfNeeded(\n              injectingViewCdRef,\n              strategy,\n              () => notifyParent,\n              ngZone\n            ),\n            handleError(),\n            map(() => iterable)\n          );\n        }),\n        handleError()\n      );\n  }\n\n  /**\n   * @internal\n   *\n   * returns an array of streams which process all of the view updates needed to reflect the latest diff to the\n   * viewContainer.\n   * I\n   *\n   * @param changes\n   * @param strategy\n   * @param count\n   */\n  function getObservablesFromChangesArray(\n    changes: RxListTemplateChange<T>[],\n    strategy: RxStrategyCredentials,\n    count: number\n  ): Observable<RxListTemplateChangeType>[] {\n    return changes.length > 0\n      ? changes.map((change) => {\n          const payload = change[1];\n          return onStrategy(\n            change[0],\n            strategy,\n            (type) => {\n              switch (type) {\n                case RxListTemplateChangeType.insert:\n                  listViewHandler.insertView(payload[0], payload[1], count);\n                  break;\n                case RxListTemplateChangeType.move:\n                  listViewHandler.moveView(\n                    payload[2],\n                    payload[0],\n                    payload[1],\n                    count\n                  );\n                  break;\n                case RxListTemplateChangeType.remove:\n                  listViewHandler.removeView(payload[1]);\n                  break;\n                case RxListTemplateChangeType.update:\n                  listViewHandler.updateView(payload[0], payload[1], count);\n                  break;\n                case RxListTemplateChangeType.context:\n                  listViewHandler.updateUnchangedContext(\n                    payload[0],\n                    payload[1],\n                    count\n                  );\n                  break;\n              }\n            },\n            { ngZone }\n          );\n        })\n      : [of(null)];\n  }\n}\n","import { NgIterable } from '@angular/core';\nimport { BehaviorSubject, Observable, ReplaySubject } from 'rxjs';\nimport { distinctUntilChanged, map, pluck } from 'rxjs/operators';\n\nexport interface RxListViewComputedContext {\n  index: number;\n  count: number;\n}\n\nexport interface RxListViewContext<T, U = RxListViewComputedContext>\n  extends RxListViewComputedContext {\n  $implicit: T;\n  item$: Observable<T>;\n  updateContext(newProps: Partial<U>): void;\n}\n\nconst computeFirst = ({ count, index }) => index === 0;\nconst computeLast = ({ count, index }) => index === count - 1;\nconst computeEven = ({ count, index }) => index % 2 === 0;\n\nexport class RxDefaultListViewContext<\n  T,\n  U extends NgIterable<T> = NgIterable<T>,\n  K = keyof T\n> implements RxListViewContext<T>\n{\n  readonly _item = new ReplaySubject<T>(1);\n  item$ = this._item.asObservable();\n  private _$implicit: T;\n  private _$complete: boolean;\n  private _$error: false | Error;\n  private _$suspense: any;\n  private readonly _context$ = new BehaviorSubject<RxListViewComputedContext>({\n    index: -1,\n    count: -1,\n  });\n\n  set $implicit($implicit: T) {\n    this._$implicit = $implicit;\n    this._item.next($implicit);\n  }\n\n  get $implicit(): T {\n    return this._$implicit;\n  }\n\n  get $complete(): boolean {\n    return this._$complete;\n  }\n\n  get $error(): false | Error {\n    return this._$error;\n  }\n\n  get $suspense(): any {\n    return this._$suspense;\n  }\n\n  get index(): number {\n    return this._context$.getValue().index;\n  }\n\n  get count(): number {\n    return this._context$.getValue().count;\n  }\n\n  get first(): boolean {\n    return computeFirst(this._context$.getValue());\n  }\n\n  get last(): boolean {\n    return computeLast(this._context$.getValue());\n  }\n\n  get even(): boolean {\n    return computeEven(this._context$.getValue());\n  }\n\n  get odd(): boolean {\n    return !this.even;\n  }\n\n  get index$(): Observable<number> {\n    return this._context$.pipe(pluck('index'), distinctUntilChanged());\n  }\n\n  get count$(): Observable<number> {\n    return this._context$.pipe(pluck('count'), distinctUntilChanged());\n  }\n\n  get first$(): Observable<boolean> {\n    return this._context$.pipe(map(computeFirst), distinctUntilChanged());\n  }\n\n  get last$(): Observable<boolean> {\n    return this._context$.pipe(map(computeLast), distinctUntilChanged());\n  }\n\n  get even$(): Observable<boolean> {\n    return this._context$.pipe(map(computeEven), distinctUntilChanged());\n  }\n\n  get odd$(): Observable<boolean> {\n    return this.even$.pipe(map((even) => !even));\n  }\n\n  constructor(item: T, customProps?: { count: number; index: number }) {\n    this.$implicit = item;\n    if (customProps) {\n      this.updateContext(customProps);\n    }\n  }\n\n  updateContext(newProps: Partial<RxListViewComputedContext>): void {\n    this._context$.next({\n      ...this._context$.getValue(),\n      ...newProps,\n    });\n  }\n\n  select = (props: K[]): Observable<any> => {\n    return this.item$.pipe(pluck(...(props as any)));\n  };\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}