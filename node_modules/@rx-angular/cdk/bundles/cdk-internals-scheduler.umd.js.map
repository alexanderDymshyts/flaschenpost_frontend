{"version":3,"file":"cdk-internals-scheduler.umd.js","sources":["../../../../libs/cdk/internals/scheduler/src/lib/schedulerMinHeap.ts","../../../../libs/cdk/internals/scheduler/src/lib/scheduler.ts","../../../../libs/cdk/internals/scheduler/src/cdk-internals-scheduler.ts"],"sourcesContent":["import { NgZone } from '@angular/core';\nimport { PriorityLevel } from './schedulerPriorities';\n\ntype Heap = Array<ReactSchedulerTask>;\n\nexport interface SchedulerTaskZone {\n  run<T>(fn: (...args: any[]) => T): T;\n}\n\nexport interface ReactSchedulerTask {\n  id: number;\n  sortIndex: number;\n  callback: Function;\n  priorityLevel: PriorityLevel;\n  startTime: number;\n  expirationTime: number;\n  isQueued?: boolean;\n  ngZone?: SchedulerTaskZone;\n}\n\nexport function push(heap: Heap, node: ReactSchedulerTask): void {\n  const index = heap.length;\n  heap.push(node);\n  siftUp(heap, node, index);\n}\n\nexport function peek(heap: Heap): ReactSchedulerTask | null {\n  const first = heap[0];\n  return first === undefined ? null : first;\n}\n\nexport function pop(heap: Heap): ReactSchedulerTask | null {\n  const first = heap[0];\n  if (first !== undefined) {\n    const last = heap.pop();\n    if (last !== first) {\n      heap[0] = last;\n      siftDown(heap, last, 0);\n    }\n    return first;\n  } else {\n    return null;\n  }\n}\n\nfunction siftUp(heap, node, i) {\n  let index = i;\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const parentIndex = (index - 1) >>> 1;\n    const parent = heap[parentIndex];\n    if (parent !== undefined && compare(parent, node) > 0) {\n      // The parent is larger. Swap positions.\n      heap[parentIndex] = node;\n      heap[index] = parent;\n      index = parentIndex;\n    } else {\n      // The parent is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction siftDown(heap, node, i) {\n  let index = i;\n  const length = heap.length;\n  while (index < length) {\n    const leftIndex = (index + 1) * 2 - 1;\n    const left = heap[leftIndex];\n    const rightIndex = leftIndex + 1;\n    const right = heap[rightIndex];\n\n    // If the left or right node is smaller, swap with the smaller of those.\n    if (left !== undefined && compare(left, node) < 0) {\n      if (right !== undefined && compare(right, left) < 0) {\n        heap[index] = right;\n        heap[rightIndex] = node;\n        index = rightIndex;\n      } else {\n        heap[index] = left;\n        heap[leftIndex] = node;\n        index = leftIndex;\n      }\n    } else if (right !== undefined && compare(right, node) < 0) {\n      heap[index] = right;\n      heap[rightIndex] = node;\n      index = rightIndex;\n    } else {\n      // Neither child is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction compare(a, b) {\n  // Compare sort index first, then task id.\n  const diff = a.sortIndex - b.sortIndex;\n  return diff !== 0 ? diff : a.id - b.id;\n}\n","// see https://github.com/facebook/react/blob/main/packages/scheduler/src/forks/Scheduler.js\n\nimport { ɵglobal } from '@angular/core';\nimport { enableIsInputPending } from './schedulerFeatureFlags';\nimport { peek, pop, push, ReactSchedulerTask, SchedulerTaskZone } from './schedulerMinHeap';\n\nimport { PriorityLevel } from './schedulerPriorities';\n\n/**\n * @description Will be provided through Terser global definitions by Angular CLI\n * during the production build.\n */\ndeclare const ngDevMode: boolean;\n\nlet getCurrentTime: () => number;\nconst hasPerformanceNow =\n  typeof ɵglobal.performance === 'object' && typeof ɵglobal.performance.now === 'function';\n\nif (hasPerformanceNow) {\n  const localPerformance = ɵglobal.performance;\n  getCurrentTime = () => localPerformance.now();\n} else {\n  const localDate = Date;\n  const initialTime = localDate.now();\n  getCurrentTime = () => localDate.now() - initialTime;\n}\n\n// Max 31 bit integer. The max integer size in V8 for 32-bit systems.\n// Math.pow(2, 30) - 1\n// 0b111111111111111111111111111111\nconst maxSigned31BitInt = 1073741823;\n\n// Times out immediately\nconst IMMEDIATE_PRIORITY_TIMEOUT = -1;\n// Eventually times out\nconst USER_BLOCKING_PRIORITY_TIMEOUT = 250;\nconst NORMAL_PRIORITY_TIMEOUT = 5000;\nconst LOW_PRIORITY_TIMEOUT = 10000;\n// Never times out\nconst IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;\n\n// Tasks are stored on a min heap\nconst taskQueue = [];\nconst timerQueue = [];\n\n// Incrementing id counter. Used to maintain insertion order.\nlet taskIdCounter = 1;\n\n// Pausing the scheduler is useful for debugging.\nlet isSchedulerPaused = false;\n\nlet currentTask: ReactSchedulerTask = null;\nlet currentPriorityLevel = PriorityLevel.NormalPriority;\n\n// This is set while performing work, to prevent re-entrancy.\nlet isPerformingWork = false;\n\nlet isHostCallbackScheduled = false;\nlet isHostTimeoutScheduled = false;\n\n// Capture local references to native APIs, in case a polyfill overrides them.\nconst setTimeout = ɵglobal.setTimeout;\nconst clearTimeout = ɵglobal.clearTimeout;\nconst setImmediate = ɵglobal.setImmediate; // IE and Node.js + jsdom\nconst messageChannel = ɵglobal.MessageChannel;\n\nconst isInputPending =\n  typeof ɵglobal.navigator !== 'undefined' &&\n  ɵglobal.navigator.scheduling !== undefined &&\n  ɵglobal.navigator.scheduling.isInputPending !== undefined\n  ? ɵglobal.navigator.scheduling.isInputPending.bind(ɵglobal.navigator.scheduling)\n  : null;\n\nconst defaultZone = {\n  run: fn => fn()\n};\nfunction advanceTimers(currentTime) {\n  // Check for tasks that are no longer delayed and add them to the queue.\n  let timer = peek(timerQueue);\n  while (timer !== null) {\n    if (timer.callback === null) {\n      // Timer was cancelled.\n      pop(timerQueue);\n    } else if (timer.startTime <= currentTime) {\n      // Timer fired. Transfer to the task queue.\n      pop(timerQueue);\n      timer.sortIndex = timer.expirationTime;\n      push(taskQueue, timer);\n    } else {\n      // Remaining timers are pending.\n      return;\n    }\n    timer = peek(timerQueue);\n  }\n}\n\nfunction handleTimeout(currentTime) {\n  isHostTimeoutScheduled = false;\n  advanceTimers(currentTime);\n\n  if (!isHostCallbackScheduled) {\n    if (peek(taskQueue) !== null) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    } else {\n      const firstTimer = peek(timerQueue);\n      if (firstTimer !== null) {\n        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n      }\n    }\n  }\n}\n\nfunction flushWork(hasTimeRemaining, initialTime) {\n  // We'll need a host callback the next time work is scheduled.\n  isHostCallbackScheduled = false;\n  if (isHostTimeoutScheduled) {\n    // We scheduled a timeout but it's no longer needed. Cancel it.\n    isHostTimeoutScheduled = false;\n    cancelHostTimeout();\n  }\n\n  isPerformingWork = true;\n  const previousPriorityLevel = currentPriorityLevel;\n  try {\n    return workLoop(hasTimeRemaining, initialTime);\n  } finally {\n    currentTask = null;\n    currentPriorityLevel = previousPriorityLevel;\n    isPerformingWork = false;\n  }\n}\n\nfunction workLoop(hasTimeRemaining: boolean, initialTime: number, _currentTask?: ReactSchedulerTask) {\n  let currentTime = initialTime;\n  if (_currentTask) {\n    currentTask = _currentTask;\n  } else {\n    advanceTimers(currentTime);\n    currentTask = peek(taskQueue);\n  }\n  let zoneChanged = false;\n  const hitDeadline = () =>\n    currentTask && currentTask.expirationTime > currentTime &&\n    (!hasTimeRemaining || shouldYieldToHost());\n\n  if (!hitDeadline()) {\n    const ngZone = currentTask.ngZone || defaultZone;\n    ngZone.run(() => {\n      while (currentTask !== null && !zoneChanged) {\n        if (hitDeadline()) {\n          break;\n        }\n        const callback = currentTask.callback;\n        if (typeof callback === 'function') {\n          currentTask.callback = null;\n          currentPriorityLevel = currentTask.priorityLevel;\n          const didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n          const continuationCallback = callback(didUserCallbackTimeout);\n          currentTime = getCurrentTime();\n          if (typeof continuationCallback === 'function') {\n            currentTask.callback = continuationCallback;\n          } else {\n            if (currentTask === peek(taskQueue)) {\n              pop(taskQueue);\n            }\n          }\n          advanceTimers(currentTime);\n        } else {\n          pop(taskQueue);\n        }\n        currentTask = peek(taskQueue);\n        zoneChanged = currentTask?.ngZone != null && currentTask.ngZone !== ngZone;\n      }\n    });\n  }\n  if (zoneChanged) {\n    return workLoop(hasTimeRemaining, currentTime, currentTask);\n  }\n  // Return whether there's additional work\n  if (currentTask !== null) {\n    return true;\n  } else {\n    const firstTimer = peek(timerQueue);\n    if (firstTimer !== null) {\n      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n    }\n    return false;\n  }\n}\n\nfunction runWithPriority(priorityLevel, eventHandler) {\n  switch (priorityLevel) {\n    case PriorityLevel.ImmediatePriority:\n    case PriorityLevel.UserBlockingPriority:\n    case PriorityLevel.NormalPriority:\n    case PriorityLevel.LowPriority:\n    case PriorityLevel.IdlePriority:\n      break;\n    default:\n      priorityLevel = PriorityLevel.NormalPriority;\n  }\n\n  const previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction next(eventHandler) {\n  let priorityLevel;\n  switch (currentPriorityLevel) {\n    case PriorityLevel.ImmediatePriority:\n    case PriorityLevel.UserBlockingPriority:\n    case PriorityLevel.NormalPriority:\n      // Shift down to normal priority\n      priorityLevel = PriorityLevel.NormalPriority;\n      break;\n    default:\n      // Anything lower than normal priority should remain at the current level.\n      priorityLevel = currentPriorityLevel;\n      break;\n  }\n\n  const previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction wrapCallback(callback: VoidFunction) {\n  const parentPriorityLevel = currentPriorityLevel;\n  return () => {\n    // This is a fork of runWithPriority, inlined for performance.\n    const previousPriorityLevel = currentPriorityLevel;\n    currentPriorityLevel = parentPriorityLevel;\n\n    try {\n      // eslint-disable-next-line prefer-rest-params\n      return callback.apply(this, arguments);\n    } finally {\n      currentPriorityLevel = previousPriorityLevel;\n    }\n  };\n}\n\ninterface ScheduleCallbackOptions {\n  delay?: number;\n  ngZone?: SchedulerTaskZone;\n}\n\nfunction scheduleCallback(\n  priorityLevel: PriorityLevel,\n  callback: VoidFunction,\n  options?: ScheduleCallbackOptions\n): ReactSchedulerTask {\n  const currentTime = getCurrentTime();\n\n  let startTime: number;\n  if (typeof options === 'object' && options !== null) {\n    const delay = options.delay;\n    if (typeof delay === 'number' && delay > 0) {\n      startTime = currentTime + delay;\n    } else {\n      startTime = currentTime;\n    }\n  } else {\n    startTime = currentTime;\n  }\n\n  let timeout: number;\n  switch (priorityLevel) {\n    case PriorityLevel.ImmediatePriority:\n      timeout = IMMEDIATE_PRIORITY_TIMEOUT;\n      break;\n    case PriorityLevel.UserBlockingPriority:\n      timeout = USER_BLOCKING_PRIORITY_TIMEOUT;\n      break;\n    case PriorityLevel.IdlePriority:\n      timeout = IDLE_PRIORITY_TIMEOUT;\n      break;\n    case PriorityLevel.LowPriority:\n      timeout = LOW_PRIORITY_TIMEOUT;\n      break;\n    case PriorityLevel.NormalPriority:\n    default:\n      timeout = NORMAL_PRIORITY_TIMEOUT;\n      break;\n  }\n\n  const expirationTime = startTime + timeout;\n\n  const newTask: ReactSchedulerTask = {\n    id: taskIdCounter++,\n    callback,\n    priorityLevel,\n    startTime,\n    expirationTime,\n    sortIndex: -1,\n    ngZone: options?.ngZone || null\n  };\n\n  if (startTime > currentTime) {\n    // This is a delayed task.\n    newTask.sortIndex = startTime;\n    push(timerQueue, newTask);\n    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\n      // All tasks are delayed, and this is the task with the earliest delay.\n      if (isHostTimeoutScheduled) {\n        // Cancel an existing timeout.\n        cancelHostTimeout();\n      } else {\n        isHostTimeoutScheduled = true;\n      }\n      // Schedule a timeout.\n      requestHostTimeout(handleTimeout, startTime - currentTime);\n    }\n  } else {\n    newTask.sortIndex = expirationTime;\n    push(taskQueue, newTask);\n    // Schedule a host callback, if needed. If we're already performing work,\n    // wait until the next time we yield.\n    if (!isHostCallbackScheduled && !isPerformingWork) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    }\n  }\n\n  return newTask;\n}\n\nfunction pauseExecution() {\n  isSchedulerPaused = true;\n}\n\nfunction continueExecution() {\n  isSchedulerPaused = false;\n  if (!isHostCallbackScheduled && !isPerformingWork) {\n    isHostCallbackScheduled = true;\n    requestHostCallback(flushWork);\n  }\n}\n\nfunction getFirstCallbackNode() {\n  return peek(taskQueue);\n}\n\nfunction cancelCallback(task) {\n  // Null out the callback to indicate the task has been canceled. (Can't\n  // remove from the queue because you can't remove arbitrary nodes from an\n  // array based heap, only the first one.)\n  task.callback = null;\n}\n\nfunction getCurrentPriorityLevel() {\n  return currentPriorityLevel;\n}\n\nlet isMessageLoopRunning = false;\nlet scheduledHostCallback = null;\nlet taskTimeoutID = -1;\n\n// Scheduler periodically yields in case there is other work on the main\n// thread, like user events. By default, it yields multiple times per frame.\n// It does not attempt to align with frame boundaries, since most tasks don't\n// need to be frame aligned; for those that do, use requestAnimationFrame.\nlet yieldInterval = 16;\n\n// TODO: Make this configurable\n// TODO: Adjust this based on priority?\nconst maxYieldInterval = 300;\nlet needsPaint = false;\nlet queueStartTime = -1;\n\nfunction shouldYieldToHost() {\n  if (needsPaint) {\n    // There's a pending paint (signaled by `requestPaint`). Yield now.\n    return true;\n  }\n  const timeElapsed = getCurrentTime() - queueStartTime;\n  if (timeElapsed < yieldInterval) {\n    // The main thread has only been blocked for a really short amount of time;\n    // smaller than a single frame. Don't yield yet.\n    return false;\n  }\n\n  // The main thread has been blocked for a non-negligible amount of time. We\n  // may want to yield control of the main thread, so the browser can perform\n  // high priority tasks. The main ones are painting and user input. If there's\n  // a pending paint or a pending input, then we should yield. But if there's\n  // neither, then we can yield less often while remaining responsive. We'll\n  // eventually yield regardless, since there could be a pending paint that\n  // wasn't accompanied by a call to `requestPaint`, or other main thread tasks\n  // like network events.\n\n  // we don't support isInputPending currently\n  /*if (enableIsInputPending) {\n    if (needsPaint) {\n      // There's a pending paint (signaled by `requestPaint`). Yield now.\n      return true;\n    }\n    if (timeElapsed < continuousInputInterval) {\n      // We haven't blocked the thread for that long. Only yield if there's a\n      // pending discrete input (e.g. click). It's OK if there's pending\n      // continuous input (e.g. mouseover).\n      if (isInputPending !== null) {\n        return isInputPending();\n      }\n    } else if (timeElapsed < maxInterval) {\n      // Yield if there's either a pending discrete or continuous input.\n      if (isInputPending !== null) {\n        return isInputPending(continuousOptions);\n      }\n    } else {\n      // We've blocked the thread for a long time. Even if there's no pending\n      // input, there may be some other scheduled work that we don't know about,\n      // like a network event. Yield now.\n      return true;\n    }\n  }*/\n\n  // `isInputPending` isn't available. Yield now.\n  return true;\n}\n\nfunction requestPaint() {\n  needsPaint = true;\n  // we don't support isInputPending currently\n  /*if (\n    enableIsInputPending &&\n    navigator !== undefined &&\n    (navigator as any).scheduling !== undefined &&\n    (navigator as any).scheduling.isInputPending !== undefined\n  ) {\n    needsPaint = true;\n  }*/\n}\n\nfunction forceFrameRate(fps) {\n  if (fps < 0 || fps > 125) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      console.error(\n        'forceFrameRate takes a positive int between 0 and 125, ' +\n          'forcing frame rates higher than 125 fps is not supported'\n      );\n    }\n    return;\n  }\n  if (fps > 0) {\n    yieldInterval = Math.floor(1000 / fps);\n  } else {\n    // reset the framerate\n    yieldInterval = 5;\n  }\n  // be aware of browser housekeeping work (~6ms per frame)\n  // according to https://developers.google.com/web/fundamentals/performance/rendering\n  yieldInterval = Math.max(5, yieldInterval - 6);\n}\n\nconst performWorkUntilDeadline = () => {\n  if (scheduledHostCallback !== null) {\n    const currentTime = getCurrentTime();\n    // Yield after `yieldInterval` ms, regardless of where we are in the vsync\n    // cycle. This means there's always time remaining at the beginning of\n    // the message event.\n    queueStartTime = currentTime;\n    const hasTimeRemaining = true;\n\n    // If a scheduler task throws, exit the current browser task so the\n    // error can be observed.\n    //\n    // Intentionally not using a try-catch, since that makes some debugging\n    // techniques harder. Instead, if `scheduledHostCallback` errors, then\n    // `hasMoreWork` will remain true, and we'll continue the work loop.\n    let hasMoreWork = true;\n    try {\n      hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);\n    } finally {\n      if (hasMoreWork) {\n        // If there's more work, schedule the next message event at the end\n        // of the preceding one.\n        schedulePerformWorkUntilDeadline();\n      } else {\n        isMessageLoopRunning = false;\n        scheduledHostCallback = null;\n      }\n    }\n  } else {\n    isMessageLoopRunning = false;\n  }\n  // Yielding to the browser will give it a chance to paint, so we can\n  // reset this.\n  needsPaint = false;\n};\n\nlet schedulePerformWorkUntilDeadline;\nif (typeof setImmediate === 'function') {\n  // Node.js and old IE.\n  // There's a few reasons for why we prefer setImmediate.\n  //\n  // Unlike MessageChannel, it doesn't prevent a Node.js process from exiting.\n  // (Even though this is a DOM fork of the Scheduler, you could get here\n  // with a mix of Node.js 15+, which has a MessageChannel, and jsdom.)\n  // https://github.com/facebook/react/issues/20756\n  //\n  // But also, it runs earlier which is the semantic we want.\n  // If other browsers ever implement it, it's better to use it.\n  // Although both of these would be inferior to native scheduling.\n  schedulePerformWorkUntilDeadline = () => {\n    setImmediate(performWorkUntilDeadline);\n  };\n} else if (typeof messageChannel !== 'undefined') {\n  const channel: MessageChannel = new messageChannel();\n  const port = channel.port2;\n\n  channel.port1.onmessage = performWorkUntilDeadline;\n  schedulePerformWorkUntilDeadline = () => {\n    port.postMessage(null);\n  };\n} else {\n  // We should only fallback here in non-browser environments.\n  schedulePerformWorkUntilDeadline = () => {\n    setTimeout(performWorkUntilDeadline, 0);\n  };\n}\n\nfunction requestHostCallback(callback) {\n  scheduledHostCallback = callback;\n  if (!isMessageLoopRunning) {\n    isMessageLoopRunning = true;\n    schedulePerformWorkUntilDeadline();\n  }\n}\n\nfunction requestHostTimeout(callback, ms) {\n  taskTimeoutID = setTimeout(() => {\n    callback(getCurrentTime());\n  }, ms);\n}\n\nfunction cancelHostTimeout() {\n  clearTimeout(taskTimeoutID);\n  taskTimeoutID = -1;\n}\n\nconst _requestPaint = requestPaint;\n\nexport {\n  runWithPriority,\n  next,\n  scheduleCallback,\n  cancelCallback,\n  wrapCallback,\n  getCurrentPriorityLevel,\n  shouldYieldToHost as shouldYield,\n  _requestPaint as requestPaint,\n  continueExecution,\n  pauseExecution,\n  getFirstCallbackNode,\n  getCurrentTime as now,\n  forceFrameRate as forceFrameRate,\n};\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["ɵglobal"],"mappings":"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"}