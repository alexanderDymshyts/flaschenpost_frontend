{"version":3,"file":"cdk-render-strategies.umd.js","sources":["../../../../libs/cdk/render-strategies/src/lib/concurrent-strategies.ts","../../../../libs/cdk/render-strategies/src/lib/native-strategies.ts","../../../../libs/cdk/render-strategies/src/lib/config.ts","../../../../libs/cdk/render-strategies/src/lib/onStrategy.ts","../../../../libs/cdk/render-strategies/src/lib/strategy-provider.service.ts","../../../../libs/cdk/render-strategies/src/lib/strategy-handling.ts","../../../../libs/cdk/render-strategies/src/cdk-render-strategies.ts"],"sourcesContent":["import { NgZone } from '@angular/core';\nimport { MonoTypeOperatorFunction, Observable } from 'rxjs';\nimport { filter, mapTo, switchMap } from 'rxjs/operators';\nimport {\n  cancelCallback,\n  scheduleCallback,\n  forceFrameRate,\n  PriorityLevel,\n} from '@rx-angular/cdk/internals/scheduler';\n\nimport {\n  RxCustomStrategyCredentials,\n  RxConcurrentStrategyNames,\n  RxStrategyCredentials,\n} from './model';\nimport { coalescingManager, coalescingObj } from '@rx-angular/cdk/coalescing';\n\n// set default to 60fps\nforceFrameRate(60);\n\nconst immediateStrategy: RxStrategyCredentials = {\n  name: 'immediate',\n  work: (cdRef) => cdRef.detectChanges(),\n  behavior: ({ work, scope, ngZone }) => {\n    return (o$) =>\n      o$.pipe(\n        scheduleOnQueue(work, {\n          ngZone,\n          priority: PriorityLevel.ImmediatePriority,\n          scope,\n        })\n      );\n  },\n};\n\nconst userBlockingStrategy: RxStrategyCredentials = {\n  name: 'userBlocking',\n  work: (cdRef) => cdRef.detectChanges(),\n  behavior: ({ work, scope, ngZone }) => {\n    return (o$) =>\n      o$.pipe(\n        scheduleOnQueue(work, {\n          ngZone,\n          priority: PriorityLevel.UserBlockingPriority,\n          scope,\n        })\n      );\n  },\n};\n\nconst normalStrategy: RxStrategyCredentials = {\n  name: 'normal',\n  work: (cdRef) => cdRef.detectChanges(),\n  behavior: ({ work, scope, ngZone }) => {\n    return (o$) =>\n      o$.pipe(\n        scheduleOnQueue(work, {\n          ngZone,\n          priority: PriorityLevel.NormalPriority,\n          scope,\n        })\n      );\n  },\n};\n\nconst lowStrategy: RxStrategyCredentials = {\n  name: 'low',\n  work: (cdRef) => cdRef.detectChanges(),\n  behavior: ({ work, scope, ngZone }) => {\n    return (o$) =>\n      o$.pipe(\n        scheduleOnQueue(work, {\n          ngZone,\n          priority: PriorityLevel.LowPriority,\n          scope,\n        })\n      );\n  },\n};\n\nconst idleStrategy: RxStrategyCredentials = {\n  name: 'idle',\n  work: (cdRef) => cdRef.detectChanges(),\n  behavior: ({ work, scope, ngZone }) => {\n    return (o$) =>\n      o$.pipe(\n        scheduleOnQueue(work, {\n          ngZone,\n          priority: PriorityLevel.IdlePriority,\n          scope,\n        })\n      );\n  },\n};\n\nfunction scheduleOnQueue<T>(\n  work: (...args: any[]) => void,\n  options: {\n    priority: PriorityLevel;\n    scope: coalescingObj;\n    delay?: number;\n    ngZone: NgZone;\n  }\n): MonoTypeOperatorFunction<T> {\n  const scope = (options.scope as Record<string, unknown>) || {};\n  return (o$: Observable<T>): Observable<T> =>\n    o$.pipe(\n      filter(() => !coalescingManager.isCoalescing(scope)),\n      switchMap((v) =>\n        new Observable<T>((subscriber) => {\n          coalescingManager.add(scope);\n          const task = scheduleCallback(\n            options.priority,\n            () => {\n              work();\n              coalescingManager.remove(scope);\n              subscriber.next(v);\n            },\n            { delay: options.delay, ngZone: options.ngZone }\n          );\n          return () => {\n            coalescingManager.remove(scope);\n            cancelCallback(task);\n          };\n        }).pipe(mapTo(v))\n      )\n    );\n}\n\nexport type RxConcurrentStrategies =\n  RxCustomStrategyCredentials<RxConcurrentStrategyNames>;\nexport const RX_CONCURRENT_STRATEGIES: RxConcurrentStrategies = {\n  immediate: immediateStrategy,\n  userBlocking: userBlockingStrategy,\n  normal: normalStrategy,\n  low: lowStrategy,\n  idle: idleStrategy,\n};\n","import { NgZone } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { coalesceWith } from '@rx-angular/cdk/coalescing';\nimport {\n  RxCustomStrategyCredentials,\n  RxNativeStrategyNames,\n  RxStrategyCredentials,\n} from './model';\nimport { getZoneUnPatchedApi } from '@rx-angular/cdk/internals/core';\n\nconst animationFrameTick = () =>\n  new Observable<number>((subscriber) => {\n    // use the unpatched API no avoid zone interference\n    const id = getZoneUnPatchedApi('requestAnimationFrame')(() => {\n      subscriber.next(0);\n      subscriber.complete();\n    });\n    return () => {\n      // use the unpatched API no avoid zone interference\n      getZoneUnPatchedApi('cancelAnimationFrame')(id);\n    };\n  });\n\nconst localCredentials: RxStrategyCredentials = {\n  name: 'local',\n  work: (cdRef, _, notification) => {\n    cdRef.detectChanges();\n  },\n  behavior:\n    ({ work, scope, ngZone }) =>\n    (o$) =>\n      o$.pipe(\n        coalesceWith(animationFrameTick(), scope as Record<string, unknown>),\n        tap(() => (ngZone ? ngZone.run(() => work()) : work()))\n      ),\n};\n\nconst noopCredentials: RxStrategyCredentials = {\n  name: 'noop',\n  work: () => void 0,\n  behavior: () => (o$) => o$,\n};\n\nconst nativeCredentials: RxStrategyCredentials = {\n  name: 'native',\n  work: (cdRef) => cdRef.markForCheck(),\n  behavior:\n    ({ work, ngZone }) =>\n    (o$) =>\n      o$.pipe(\n        tap(() =>\n          ngZone && !NgZone.isInAngularZone()\n            ? ngZone.run(() => work())\n            : work()\n        )\n      ),\n};\n\n/**\n * @deprecated\n * angular drops the internal markDirty API, will fall back to native if used\n */\nconst globalCredentials: RxStrategyCredentials = {\n  ...nativeCredentials,\n  name: 'global',\n};\n\nexport type RxNativeStrategies =\n  RxCustomStrategyCredentials<RxNativeStrategyNames>;\nexport const RX_NATIVE_STRATEGIES: RxNativeStrategies = {\n  global: globalCredentials,\n  native: nativeCredentials,\n  noop: noopCredentials,\n  local: localCredentials,\n};\n","import { InjectionToken } from '@angular/core';\nimport { RX_CONCURRENT_STRATEGIES } from './concurrent-strategies';\nimport {\n  RxCustomStrategyCredentials,\n  RxDefaultStrategyNames,\n  RxStrategyNames,\n} from './model';\nimport { RX_NATIVE_STRATEGIES } from './native-strategies';\n\nexport interface RxRenderStrategiesConfig<T extends string> {\n  primaryStrategy?: RxStrategyNames<T>;\n  customStrategies?: RxCustomStrategyCredentials<T>;\n  patchZone?: boolean;\n  parent?: boolean;\n}\n\nexport const RX_RENDER_STRATEGIES_CONFIG = new InjectionToken<\n  RxRenderStrategiesConfig<string>\n>('rxa-render-strategies-config');\n\nexport const RX_RENDER_STRATEGIES_DEFAULTS: Required<\n  RxRenderStrategiesConfig<RxDefaultStrategyNames>\n> = {\n  primaryStrategy: 'normal',\n  customStrategies: {\n    ...RX_NATIVE_STRATEGIES,\n    ...RX_CONCURRENT_STRATEGIES,\n  },\n  patchZone: true,\n  parent: true,\n} as const;\n\nexport function mergeDefaultConfig<T extends string>(\n  cfg?: RxRenderStrategiesConfig<T>\n): Required<RxRenderStrategiesConfig<T | RxDefaultStrategyNames>> {\n  const custom: RxRenderStrategiesConfig<T> = cfg\n    ? cfg\n    : ({\n        customStrategies: {},\n      } as any);\n  return {\n    ...RX_RENDER_STRATEGIES_DEFAULTS,\n    ...custom,\n    customStrategies: {\n      ...custom.customStrategies,\n      ...RX_RENDER_STRATEGIES_DEFAULTS.customStrategies,\n    },\n  };\n}\n","import { NgZone } from '@angular/core';\nimport { RxCoalescingOptions } from '@rx-angular/cdk/coalescing';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map, take } from 'rxjs/operators';\nimport { RxRenderWork, RxStrategyCredentials } from './model';\n\n/**\n * @internal\n *\n * @param value\n * @param strategy\n * @param workFactory\n * @param options\n */\nexport function onStrategy<T>(\n  value: T,\n  strategy: RxStrategyCredentials,\n  workFactory: (\n    value: T,\n    work: RxRenderWork,\n    options: RxCoalescingOptions\n  ) => void,\n  options: RxCoalescingOptions & { ngZone?: NgZone } = {}\n): Observable<T> {\n  return new Observable<T>((subscriber) => {\n    subscriber.next(value);\n  }).pipe(\n    strategy.behavior({\n      work: () => workFactory(value, strategy.work, options),\n      scope: (options.scope as Record<string, unknown>) || {},\n      ngZone: options.ngZone,\n    }),\n    catchError((error) => throwError(() => [error, value])),\n    map(() => value),\n    take(1)\n  );\n}\n","import {\n  ChangeDetectorRef,\n  Inject,\n  Injectable,\n  NgZone,\n  Optional\n} from '@angular/core';\nimport {\n  BehaviorSubject,\n  fromEvent,\n  MonoTypeOperatorFunction,\n  Observable\n} from 'rxjs';\nimport { map, shareReplay, switchMap, takeUntil } from 'rxjs/operators';\nimport {\n  mergeDefaultConfig, RxRenderStrategiesConfig, RX_RENDER_STRATEGIES_CONFIG\n} from './config';\nimport {\n  RxStrategies,\n  RxStrategyCredentials,\n  RxStrategyNames,\n  ScheduleOnStrategyOptions\n} from './model';\nimport { onStrategy } from './onStrategy';\n\n/**\n * @description\n * RxStrategyProvider is a wrapper service that you can use to consume strategies and schedule your code execution.\n *\n * @example\n * Component({\n *   selector: 'app-service-communicator',\n *   template: ``\n * });\n * export class ServiceCommunicationComponent {\n *   private currentUserSettings;\n *\n *   constructor(\n *     private strategyProvider: RxStrategyProvider,\n *     private userService: UserService,\n *     private backgroundSync: BackgroundSyncService\n *   ) {\n *     this.userService.fetchCurrentUserSettings\n *       .pipe(\n *         tap(settings => (this.currentUserSettings = settings)),\n *         this.strategyProvider.scheduleWith(\n *           settings => this.backgroundSync.openConnection(settings),\n *           { strategy: 'idle' }\n *         )\n *       )\n *       .subscribe();\n *   }\n * }\n *\n * @docsCategory RxStrategyProvider\n * @docsPage RxStrategyProvider\n */\n@Injectable({ providedIn: 'root' })\nexport class RxStrategyProvider<T extends string = string> {\n  private _strategies$ = new BehaviorSubject<RxStrategies<T>>(undefined);\n  private _primaryStrategy$ = new BehaviorSubject<\n    RxStrategyCredentials<RxStrategyNames<T>>\n  >(undefined);\n\n  private readonly _cfg: Required<RxRenderStrategiesConfig<T>>;\n\n  /**\n   * @description\n   * Returns current `RxAngularConfig` used in the service.\n   * Config includes:\n   * - strategy that currently in use - `primaryStrategy`\n   * - array of custom user defined strategies - `customStrategies`\n   * - setting that is responsible for running in our outside of the zone.js - `patchZone`\n   */\n  get config(): Required<RxRenderStrategiesConfig<T>> {\n    return this._cfg;\n  }\n\n  /**\n   * @description\n   * Returns object that contains key-value pairs of strategy names and their credentials (settings) that are available in the service.\n   */\n  get strategies(): RxStrategies<T> {\n    return this._strategies$.getValue();\n  }\n\n  /**\n   * @description\n   * Returns an array of strategy names available in the service.\n   */\n  get strategyNames(): string[] {\n    return Object.values(this.strategies).map((s) => s.name);\n  }\n\n  /**\n   * @description\n   * Returns current strategy of the service.\n   */\n  get primaryStrategy(): RxStrategyNames<T> {\n    return this._primaryStrategy$.getValue().name;\n  }\n\n  /**\n   * @description\n   * Set's the strategy that will be used by the service.\n   */\n  set primaryStrategy(strategyName: RxStrategyNames<T>) {\n    this._primaryStrategy$.next(\n      <RxStrategyCredentials<RxStrategyNames<T>>>this.strategies[strategyName]\n    );\n  }\n\n  /**\n   * @description\n   * Current strategy of the service as an observable.\n   */\n  readonly primaryStrategy$: Observable<RxStrategyCredentials> =\n    this._primaryStrategy$.asObservable();\n\n  /**\n   * @description\n   * Returns observable of an object that contains key-value pairs of strategy names and their credentials (settings) that are available in the service.\n   */\n  readonly strategies$ = this._strategies$.asObservable();\n\n  /**\n   * @description\n   * Returns an observable of an array of strategy names available in the service.\n   */\n  readonly strategyNames$ = this.strategies$.pipe(\n    map((strategies) => Object.values(strategies).map((s) => s.name)),\n    shareReplay({ bufferSize: 1, refCount: true })\n  );\n\n  /**\n   * @internal\n   */\n  constructor(\n    @Optional()\n    @Inject(RX_RENDER_STRATEGIES_CONFIG)\n    cfg: RxRenderStrategiesConfig<T>\n  ) {\n    this._cfg = mergeDefaultConfig(cfg);\n    this._strategies$.next(this._cfg.customStrategies as any);\n    this.primaryStrategy = this.config.primaryStrategy;\n  }\n\n  /**\n   * @description\n   * Allows to schedule a work inside rxjs `pipe`. Accepts the work and configuration options object.\n   * - work is any function that should be executed\n   * - (optional) options includes strategy, patchZone and scope\n   *\n   * Scope is by default a subscription but you can also pass `this` and then the scope will be current component.\n   * Scope setup is useful if your work is some of the methods of `ChangeDetectorRef`. Only one change detection will be triggered if you have multiple schedules of change detection methods and scope is set to `this`.\n   *\n   * @example\n   * myObservable$.pipe(\n   *    this.strategyProvider.scheduleWith(() => myWork(), {strategy: 'idle', patchZone: false})\n   * ).subscribe();\n   *\n   * @return MonoTypeOperatorFunction<R>\n   */\n  scheduleWith<R>(\n    work: (v?: R) => void,\n    options?: ScheduleOnStrategyOptions\n  ): MonoTypeOperatorFunction<R> {\n    const strategy = this.strategies[options?.strategy || this.primaryStrategy];\n    const scope = options?.scope || {};\n    const _work = getWork(work, options?.patchZone);\n    const ngZone = options?.patchZone || undefined;\n    return (o$) =>\n      o$.pipe(\n        switchMap((v) =>\n          onStrategy(\n            v,\n            strategy,\n            (_v) => {\n              _work(_v);\n            },\n            { scope, ngZone }\n          )\n        )\n      );\n  }\n\n  /**\n   * @description\n   * Allows to schedule a work as an observable. Accepts the work and configuration options object.\n   * - work is any function that should be executed\n   * - (optional) options includes strategy, patchZone and scope\n   *\n   * Scope is by default a subscription but you can also pass `this` and then the scope will be current component.\n   * Scope setup is especially useful if you provide work that will trigger a change detection.\n   *\n   * @example\n   * this.strategyProvider.schedule(() => myWork(), {strategy: 'idle', patchZone: false}).subscribe();\n   *\n   * @return Observable<R>\n   */\n  schedule<R>(\n    work: () => R,\n    options?: ScheduleOnStrategyOptions\n  ): Observable<R> {\n    const strategy = this.strategies[options?.strategy || this.primaryStrategy];\n    const scope = options?.scope || {};\n    const _work = getWork(work, options?.patchZone);\n    const ngZone = options?.patchZone || undefined;\n    let returnVal: R;\n    return onStrategy(\n      null,\n      strategy,\n      () => {\n        returnVal = _work();\n      },\n      { scope, ngZone }\n    ).pipe(map(() => returnVal));\n  }\n\n  /**\n   * @description\n   * Allows to schedule a change detection cycle. Accepts the ChangeDetectorRef and configuration options object.\n   * Options include:\n   * - afterCD which is the work that should be executed after change detection cycle.\n   * - abortCtrl is an AbortController that you can use to cancel the scheduled cycle.\n   *\n   * @example\n   * this.strategyProvider.scheduleCd(this.changeDetectorRef, {afterCD: myWork()});\n   *\n   * @return AbortController\n   */\n  scheduleCD(\n    cdRef: ChangeDetectorRef,\n    options?: ScheduleOnStrategyOptions & {\n      afterCD?: () => void;\n      abortCtrl?: AbortController;\n    }\n  ): AbortController {\n    const strategy = this.strategies[options?.strategy || this.primaryStrategy];\n    const scope = options?.scope || cdRef;\n    const abC = options?.abortCtrl || new AbortController();\n    const ngZone = options?.patchZone || undefined;\n    const work = getWork(() => {\n      strategy.work(cdRef, scope);\n      if (options?.afterCD) {\n        options.afterCD();\n      }\n    }, options.patchZone);\n    onStrategy(\n      null,\n      strategy,\n      () => {\n        work();\n      },\n      { scope, ngZone }\n    )\n      .pipe(takeUntil(fromEvent(abC.signal, 'abort')))\n      .subscribe();\n    return abC;\n  }\n}\n\nfunction getWork<T>(\n  work: (args?: any) => T,\n  patchZone?: false | NgZone\n): (args?: any) => T {\n  let _work = work;\n  if (patchZone) {\n    _work = (args?: any) => patchZone.run(() => work(args));\n  }\n  return _work;\n}\n","import { Observable, ReplaySubject } from 'rxjs';\nimport { map, share, startWith, switchAll } from 'rxjs/operators';\n\nimport { coerceAllFactory } from '@rx-angular/cdk/coercing';\nimport { RxCustomStrategyCredentials, RxStrategyCredentials } from './model';\n\nexport interface RxStrategyHandler {\n  strategy$: Observable<RxStrategyCredentials>;\n  next(name: string | Observable<string>): void;\n}\n\n/**\n * @internal\n *\n * A factory function returning an object to handle the process of turning strategy names into `RxStrategyCredentials`\n * You can next a strategy name as Observable or string and get an Observable of `RxStrategyCredentials`\n *\n * @param defaultStrategyName\n * @param strategies\n */\nexport function strategyHandling(\n  defaultStrategyName: string,\n  strategies: RxCustomStrategyCredentials<string>\n): RxStrategyHandler {\n  const hotFlattened = coerceAllFactory<string>(\n    () => new ReplaySubject<string | Observable<string>>(1),\n    switchAll()\n  );\n  return {\n    strategy$: hotFlattened.values$.pipe(\n      startWith(defaultStrategyName),\n      nameToStrategyCredentials(strategies, defaultStrategyName),\n      share()\n    ) as Observable<RxStrategyCredentials>,\n    next(name: string | Observable<string>) {\n      hotFlattened.next(name);\n    },\n  };\n}\n\n/**\n * @internal\n */\nfunction nameToStrategyCredentials(\n  strategies: RxCustomStrategyCredentials<string>,\n  defaultStrategyName: string\n) {\n  return (\n    o$: Observable<string | null | undefined>\n  ): Observable<RxStrategyCredentials> =>\n    o$.pipe(\n      map((name) =>\n        name && Object.keys(strategies).includes(name)\n          ? strategies[name]\n          : strategies[defaultStrategyName]\n      )\n    );\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["forceFrameRate","filter","coalescingManager","switchMap","Observable","scheduleCallback","cancelCallback","mapTo","getZoneUnPatchedApi","coalesceWith","tap","NgZone","InjectionToken","catchError","throwError","map","take","BehaviorSubject","shareReplay","takeUntil","fromEvent","Injectable","Optional","Inject","coerceAllFactory","ReplaySubject","switchAll","startWith","share"],"mappings":"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"}